#Hpragma directive » 74.5

isgreater
isgreaterequal
isless
islessequal

islessgreater

isunorderea

 

23.4  The <math.h> Header (C99): Mathematics 611

C99 provides a pragma named FP_CONTRACT that gives the programmer
control over contraction. Here’s how the pragma is used:

fpragma STDC FP CONTRACT on-off-switch

The value of on-aff-switch is either ON, OFF, or DEFAULT. If ON is selected. the
compliler is allowed to contract expressions; if OFF is selected, the compiler is pro-
hibited from contracting expressions. DEFAULT is useful for restoring the default
setting (which may be either ON or OFF). If the pragma is used at the outer level of
à program (outside any function definitions), it remains in effect until a subsequent
FP CONTRACT pragma appears in the same file, or until the file ends. If the
pragma 1s used inside a compound statement (including the body of a function), it
must appear first, before any declarations or statements; it remains in effect until
the end of the statement, unless overridden by another pragma. A program may
still call £ma to perform an explicit contraction cven when FP_ CONTRACT has
been used to prohibit automatic contraction of expressions.

Comparison Macros

int isgreater (real-floating x, real-floating y) ;

int isgreaterequal (real-floatinge x, real-floating y) ;
int isless (real-floating x, real-floating y) ;

int islessequal (real-floating x, real-floating y) ;
int islessgreater (real-floatine x, real-floating y) ;
int isunordered (real-floating x, real-floating y) ;

Our final category consists of function-like macros that compare two numbers.
These macros are designed to accept arguments of any real floating type.

The comparison macros exist because of a problem that can arise when float-
ing-point numbers are compared using the ordinary relational operators such as <
and >. If either operand (or both) is a NaN, such a comparison may cause the
invalid floating-point exception to be raised, because NaN values—unlike other
floating-point values—are considered to be unordered. The comparison macros
can be used to avoid this exception. These macros are said to be “quiet” versions of
the relational operators because they do their job without raising an exception.

The isgreater, isgreaterequal, isless, and islessequal mac-
ros perform the same operation as the >, >=, <, and <= operators, respectively,
except that they don’t cause the invalid floating-point exception to be raised when
the arguments are unordered.

The call islessgreater (x, y) is equivalent to (x) < (y) | | (x) >
(y), except that it guarantees not to evaluate x and y twice, and—like the previ-
ous macros—doesn’t cause the invalie Floating-point exception to be raised when
x and y are unordered.

The isunordered macro returns | if its arguments are unordered (at least
one of them 1s a NaN) and 0 otherwise.
