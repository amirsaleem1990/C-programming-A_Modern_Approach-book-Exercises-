332

Chapter 14  The Preprocessor

æ

variable-lengih argument lists
»-26.1

After preprocessing, the declaration will have the following appearance:
char empty_string[] = "";

If one of the arguments of the ## operator is empty. it’s replaced by an invisi-
ble “placemarker” token. Concatenating an ordinary token with a placemarker
token yields the original token (the placemarker disappears). If two placemarker
tokens are concatenated, the result is a single placemarker. Once macro expansion
has been completed, placemarker tokens disappear from the program. Consider the
following example:

fdefine JOIN(x,y,z) x#iyHkz

int JOIN(a,b,c), JOIN(a,b,), JOIN(a,,c), JOIN(,,c);
After preprocessing, the declaration will have the following appearance:
int abc, ab, ac, C;

The missing arguments were replaced by placemarker tokens, which then disap-
peared when concatenated with any nonempty arguments. AIl three arguments to
the JOIN macro could even be missing, which would yield an empty result.

Macros with a Variable Number of Arguments

In C89, a macro must have a fixed number of arguments, if it has any at all. C99
loosens things up a bit, allowing macros that take an unlimited number of areu-
ments. This feature has long been available for functions, so it’s not surprising that
macros were finally put on an equal footing.

The primary reason for having a macro with a variable number of arguments is
that it can pass these arguments to a f'unction that accepts a variable number of
arguments. such as print£ or scan£. Here’s an example:

#define TEST(condition, ...) ((condition)? \
print£ ("Passed test: %s\n"', #condition): \
print£f(_ _ VA ARGS___))

The . . . token, known as ellipsis, goes at the end of a macro’s parameter list, pre-
ceded by ordinary parameters, if there are any.__ VA ARGS __ is a special identi-
fier that can appear only tn the replacement list of a macro with a variable number
of arguments; il represents all the arguments that correspond to the ellipsis. (There
must be at least one argument that corresponds to the ellipsis, although that argu-
ment may be empty.) The TEST macro requires at leust two arguments. The first
argument matches the condition parameter: the remaining arguments match
the ellipsis.
Here's an example that shows how the TEST macro might be used:

TEST (voltage <= max voltage,
"Voltage %d exceeds %d\n", voltage, max voltage) ;

The preprocessor will produce the following output (reformatted for readability):
