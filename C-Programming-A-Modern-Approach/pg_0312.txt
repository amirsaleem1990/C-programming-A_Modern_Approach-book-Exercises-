getchar function » 7.3

Q&ÂÀ

13.4

13.4  Accessing the Characters ina String — 287

str represents the array into which we'1l store the input, and n 1s the maximum
number of characters to be read. If the input line contains more than n characters,
read _line will discard the additional characters. We'll have read_line
return the number of characters it actually stores in str (a number anywhere from
0 to n). We may not always need read_line's return value, but it doesn’t hurt to
have it available.

read_line consists primarily of à loop that calls getchar to read a char-
acter and then stores the character in str. provided that there’s room left. The loop
terminates when the new-line character is read. (Strictly speaking, we should also
have the loop terminate if getchar should fail to read a character, but we’ll
ignore that complication for now.) Here's the complete definition of read_line:

int read line(char str{(], int n)

{
int ch, i = O0;
while ((ch = getchar()) != '\n')
if (i < n)
str[i++] = ch;
str[i] = '\0'; /* terminates string */
return i; /* number of characters stored */

}

Note that ch has int type rather than char type, because getchar returns the
character that it reads as an int value.

Before returning, read _ line puts a null character at the end of the string.
Standard functions such as scanf and gets automatically put a null character at
the end of an input string; if we're writing our own input function, however, we
must take on that responsibility.

Accessing the Characters in a String

Since strings are stored as arrays, we can use subscripting to access the characters
in a string. To process every character in a string s, for example, we can set up a
loop that increments a counter i and selects characters via the expression s [i ] .

Suppose thal we need a function that counts the number of spaces in a string.
Using array subscripting, we might write the function in the following way:

int count spaces(const char s[])

{

int count = O, i;
for (i = O; s[i] != '"\O'; i++)
i£f (s[i] == ‘ ‘)
count++;

return count;

}
