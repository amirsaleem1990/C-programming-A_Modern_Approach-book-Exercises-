574 Chapter 22

rewind

fgetpos
fsetpos

QaA

PROGRAM

invclear.c

Input/Output

idea to subtrac! values returned by £tell to see how far apart two file positions
are.

The rewind function sets the file position at the beginning. The call
rewind (fp) is nearly equivalent to fseek (£p, OL, SEEK SET). The dif-
ference? rewind doesn’t return a value but does clear the error indicator for fp.

Êseek and £tell have one problem: they're limited to files whose posi-
tions can be stored in à long integer. For working with very large files, C pro-
vides two additional functions: fgetpos and fsetpos. These functions can
handle large files because they use values of type Epos_ t lo represent file posi-
tions, An fpos_t value isn’t necessarily an integer: it could be a structure, for
instance.

The call fgetpos(fp, &file pos) stores the file position associated
with £p in the £ile_pos variable. The call £setpos (£p, &file pos) sets
the file position for £p to be the value stored in £ile pos. (This value must have
been obtained by a previous call of fgetpos.) If a call of £getpos or fsetpos
fails, it stores an error code in errno. Both functions return zero when they suc-
ceed and a nonzero value when they fail.

Here's how we might use Égetpos and £setpos to save a file position and
return to it later:

fpos t file pos;
Égetpos (fp, &file pos) ; /* saves current position */

Ésetpos (fp, &file pos) ; /* returns to old position */

Modifying a File of Part Records

The following program opens a binary file containing part structures, reads the
structures into an array, sets the on_hand member of each structure to O, and then
writes the structures back to the file. Note that the program opens the file in
"rb+" mode, allowing both reading and writing.

/* Modifies a file of part records by setting the quantity
on hand to zero for all records */

#include <stdio.h>
#include <stdlib.h>

#define NAME LEN 25
#define MAX PARTS 100

struct part |
int number;
char name [NAME LEN+1] ;
int on hand;

} inventory [MAX PARTS] ;
