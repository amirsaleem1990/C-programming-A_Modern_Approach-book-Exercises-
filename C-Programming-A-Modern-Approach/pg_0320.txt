13.5  Using the C String Library 295

int read line(char str[], int n);

int main (void)

{
char reminders [MAX _ REMIND] [MSG_LEN+3] ;
char day _ str[3], msg_str [MSG_LEN+1] ;
int day, i, j, num remind = 0;

for (;;) |
i£ (num remind == MAX REMIND) {
printf("-- No space left --\n") ;
break;

}

printf ("Enter day and reminder: ") ;
scanf ("%2d", &day) ;
if (day == O)

break ;
sprint£ (day_str, "%2d", day) ;
read_line (msg_str, MSG_LEN) ;

for (i = 0; i < num remind; i++)
if (stromp(day_str, reminders[i]) < O)
break;
for (j = num remind; j > i; ])--)

strcopy (reminders[j], reminders [j-1)] ) ;

strcpy (reminders (i], day_str) ;
strcat (reminders {(i], msg _str) ;

num_remind++ ;

}

printf ("\nDay Reminder\n") ;
for (i = 0; i < num remind; i++)
printf(" %s\n", reminders [i] ) ;

return 0;

}

int read _line(char str[], int n)

{

int ch, i = 0;

while ((ch = getchar()) != '\n')
if (i < n)
str[i++] = ch;
str[i] = '\0';
return ;

Although remind. c 1s useful for demonstrating the stropy. strcat, and
stremp functions, it lacks something as a practical reminder program. There are
