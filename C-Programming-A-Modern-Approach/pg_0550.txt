Section 20.1

#1.

t

6.

Exercises 525

Exercises

Show the output produced by each of the following program fragments. Assume that i, j.
and k are unsigned short variables.
(a) i = 8; j = 9;
print£("%d", i >> 1 + j >> 1);
(b) à = 1;
printf("3d", i & -i
(c) i = 2; j = 1; k = O
printf("%$d", -i & j “ Kk);
(d) i = 7; 3 = 8; k = 9;
print£("%d", i “ j & k);

Describe u simple way to “toggle” a bit (change it from O to ! or from L to O). Hlustrate the
technique by writing a statement that toggles bit 4 of the vartable @.

Explain what effect the following macro has on its arguments. You may assume that the
arguments have the same type.

#define M(x,y) ((x)"=(y), (y)*=(x), (x)°=(y))

In computer graphies, colors arc often stored as three numbers. representing recd, green, and
blue intensities. Suppose that each number requires eight bits. and we'd like to store all three
values in a single long integer, Write a macro named MK_COLOR with three parameters (the
red, grcen, and blue intensities). MK_COLOR should return à Long in which the last three
bytes contain the red. green, and blue intensities, with the red value as the last byte and the
sreen value as the next-to-last byte.

Write macros named GET_RED. GET GREEN, and GET_BLUE that. when given a color as
an argument (see Exercise 4), return its 8-bit red. green. and bluc intensities.

(a) Use the bitwise opcrators to write the following funetion:

unsigned short swap bytes (unsigned short i);

swap_bytes should return the number that results from swapping the two bytes in i.
(Short integers occupy two bytes on most computers.) For example. if à has the value
0x1234 (00010010 00110100 in binary), then swap_bytes should return Ox3412
(00110100 00010010 in binary). Test your function by writing à program that reads a num-
ber in hexadecimal. then writes the number with its bytes swapped:

Enter a hexadecimal number (up to four digits): 1234
Number with bytes swapped: 3412

Hint: Use the 3hx conversion to read and write the hex numbers.

(b) Condense the swap_bytes f'unction so that its body is a single statement.

Write the following functions:

unsigned int rotate _ left (unsigned int i, int n);
unsigned int rotate right (unsigned int i, int n);

rotate le£t should return the result of shifting the bits in i to the left by n places.
with the bits that were “shifted off* moved to the right end of i. (For example, the call
