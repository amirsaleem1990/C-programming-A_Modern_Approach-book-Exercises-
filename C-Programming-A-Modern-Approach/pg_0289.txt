264 Chapter 12  Pointers and Arrays

idiom

/

PROGRAM

reverse3.c

To simplify the loop, we can replace &a [0] by a and &a [N] by à + N:

for (p = a; p < a + N; p++)
sum += *p;

 

Although an array name can be used as a pointer, it’s not possible to assign it a new
value. Attempting to make it point elsewhere is an error:

while (*a != O)
a++; /*** WRONG ***/

This is no great loss: we can always copy a into a pointer variable, then change the
pointer variable:

p = ài
while (*p != O)
p++;

 

Reversing a Series of Numbers (Revisited)

The reverse. c program of Section 8.1 reads 10 numbers, then writes the num-
bers in reverse order. As the program reads the numbers, it stores them in an array.
Once all the numbers are read, the program steps through the array backwards as it
prints the numbers.

The original program used subscripting to access elements of the array. Here's
a new version in which l’ve replaced subscripting with pointer arithmetic.

/* Reverses a series of numbers (pointer version) */
#include <stdio.h>
#define N 10

int main(void)

(

int a[N], *p;

printË ("Enter %d numbers: ", N);
for (p = a; p < a + N; p++)
scanf ("%*d", p);

printf ("In reverse order:") ;

for (p = a + N - 1; p >= a; p--)
printf£(" %d", *p) ;

print£("\n") ;

return 0;

In the original program, an integer variable i kept track of the current position
within the array. The new version replaces i with p, à pointer variable. The num-
