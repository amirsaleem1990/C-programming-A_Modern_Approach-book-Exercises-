information hiding > 79.2

18.2 Storage Classes 461

The static Storage Class

The static storage class can be used with all variables, regardless of where
they’re declared, but it has a different effect on a variable declared outside a block
than it doëes on a variable declared inside a block. When used ourside a block, the
word static specifies that a variable has internal linkage. When used inside a
block, static changes the variable's storage duration from automatic to static.
The following figure shows the effect of declaring i and j to be static:

_— gtatic storage duration
static int i,— file scope
- internal linkage

void f (void)

{ static storage duration
static int j;——-bMŒ<ampe
no linkage
}

When used in a declaration outside a block. static essentially hides a vari-
able within the file in which ils declared: only functions that appear in the same
file can see the variable. In the following example. the functions £1 and f2 both
have access to i, but functions in other files don’t:

static int i;

void £1(void)

/* has access to i */
void £2 (void)

/* has access to i */
This use of static can help implement a technique known as information hid-
ing.

A static variable declared within a block resides at the same storage loca-
tion throughout program execution. Unlike automatic variables, which lose their
values each time the program leaves the enclosing block, a static variable will
retain its value indefinitely. static variables have some interesting properties:

m À static variable in a block is initialized only once. prior to program execu-
tion. An auto variable is initialized every time it comes into existence (pro-
vided. of course, that it has an initialiZer).

w Each time a function is called recursively. it gets a new set of auto variables.
If it has a static variable. on the other hand, that variable is shared by all
calls of the function.
