predefined macros > 14.3

15,4  Building a Multiple-File Program 371

Once we've made these changes. we'll rebuild the just ify program by recom-
piling word. c and justi£y. c and then relinking. There's no necd to recompile
line.c, which doesn’t include word.h and therefore won'{ be affected by
changes to it. With the GCC compiler. we could use the following command Lo
rebuild the program:

gcc -o justify justi£fy.c word.c line.o

Note the mention of 1ine.o instcad of line. c.

Onc of the advantages of using makefiles is that rebuilding 1s handled auto-
matically. By examining the date of cach file, the make utility can determine
which files have changed since the program was last built. Tt then recompiles
thesc files. together with all files that depend on them, either directly or indirect-
ly. For example, if we make the indicated changes to word.h, word. c, and
justi£y.c and then rebuild thé justify program. make will perform the
following actions:

|. Build justi£y. 0 by compiling justi£fy.c (because justi£fy.c and
word.h were changed).

D

. Build word.o by compiling word.c (because word.c and word.h
were changed).

3. Build justify by linkinge justify.o, word.o, and line.o
(because justi£fy.o and word.o werc changed).

Defining Macros Outside a Program

C compilers usually provide some method of specifying the value of a macro at the
time à program is compiled. This ability makes it easy to change the value of a
macro without editing any of the program's files. ls especially valuable when pro-
grams are built automatically using makefiles.

Most compilers (including GCC) support the -D option. which allows the
value of a macro to be specified on the command line:

gcc -DDEBUG=1 foo.c

In this example, the DEBUG macro is defined to have the value 1 in the program
foo. c, just as 1f the line

#Hdefine DEBUG 1

appeared at the beginning of foo.c. If the -D option names a macro wilhout
specifying its value. the value 1s taken to be |.

Many compilers also support the -U option. which ‘’undefines” a macro as if
by using fundef. We can use -U to undefine a predefined macro or onc that was
defined carlier in the command line using -D.
