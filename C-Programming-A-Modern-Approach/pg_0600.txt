22.8

 

22.8  String l/O 575

int num parts;

int main(void)

{
FILE *fp;
int i;
if ((fp = fopen("inventory.dat", "rb+")) == NULL) {
Eprint£(stderr, "Can't open inventory file\n") ;
exit(EXIT_FÀILURE);
}

num _ parts = fread(inventory, sizeof (struct part),
MAX PARTS, fp);

for (i = 0; i < num parts; i++)
inventory [i] .on hand = 0;

rewind ( fp) ;
EÉwrite (inventory, sizeof (struct part), num parts, fp);
fclose (fp) ;

return 0;

;

Calling rewind is critical, by the way. After the fread call, the file position is at
the end of the file. IŸ we were to call fwrite without calling rewind first,
Ewrite would add new data to the end of the file instead of overwriting the old
data.

String I/O

The functions described in this section are à bit unusual, since they have nothing to
do with streams or files, Instead, they allow us to read and write data using a string
as though it were a stream. The sprintf and snprintf functions write charac-
ters into a string in the same way they would be written to a stream: the sscanf
function reads characters from a string as though it were reading from a stream.
These functions, which closely resemble printf and scanf, are quite useful.
sprintf and snprint£ give us access to printf's formattine capabilities
without actually having to write data to a stream. Similarly, sscan£ gives us
access to scanf s powerful pattern-matching capabilities. The remainder of this
section covers sprintf, snprint£, and sscanf in detail.

Three similar functions (vsprint£. vsnprint£, and vsscanf£f) also
belong to <stdio.h>. However, these functions rely on the va_list type,
which is declared in <stdarg.h>. l'Il postpone discussing them until Section
26.1, which covers that header.
