4 Expressions

One does not learn computing by using a hand
calculator, but one can forget arithmetic.

One of C’s distinguishing characteristics is its emphasis on expressions—formulas
that show how to compute a value—rather than statements. The simplest expres-
sions are variables and constants. À variable represents a value to be computed as
the program runs: à constant represents a value that doesn't change. More compli-
cated expressions apply operators to operands (which are themselves expressions).
In the expression a + (b * c). the + operator is applied to the operands a and
(b * c), both of which are expressions in their own right.

Operators are the basic tools for building expressions, and C has an unusually
rich collection of them. To start off, C provides the rudimentary operators that are
found in most programming languages:

m Arithmetic operators. including addition, subtraction, multiplication, and divi-
sion.
# Relational operators to perform comparisons such as “i 1s grearer than 02

m Logical operators Lo build conditions such as “i is greuter than 0 and à is less
than 10”

But C doesn°t stop here; it goes on to provide dozens of other operators. There are
so many operators, in fact, that we'll need to introduce them gradually over the
first twenty chapters of this book. Mastering so many operators can be a chore, but
it’s essential to becoming proficient at C.

In this chapter, we*I1 cover some of C’s most fundamental operators: the arith-
metic operators (Section 4.1), the assignment operators (Section 4.2). and the
increment and decrement operators (Section 4.3). Section 4.1 also explains opera-
tor precedence and associativity, which are important for expressions that contain
more than one operator. Section 4.4 describes how C expressions are evaluated.
Finally, Section 4.5 introduces the expression statement, an unusual feature that
allows any expression to serve as a statement.

53
