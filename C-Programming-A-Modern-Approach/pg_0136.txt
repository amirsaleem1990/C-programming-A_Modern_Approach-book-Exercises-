linked lists » 77,5

6.4

6.4 Exiting from a Loop 111

square += odd;

}

return 0;

}

The for statement in this program initializes one variable (square), tests
another (i), and increments a third (odd). i 1s the number to be squared, square
is the square of i, and odd is the odd number that must be added to the current
square to get the next square (allowing the program to compute consecutive
squares without performing any multiplications).

The tremendous flexibility of the £or statement can sometimes be useful;
we’1l find it to be a great help when working with linked lists. The for statement
can easily be misused, though, so don’t go overboard. The for loop in
square3 .c would be a lot clearer if we rearranged its pieces so that the loop 1s
clearly controlled by i.

Exiting from a Loop

We*ve seen how to write loops that have an exit point before the loop body (using
while and for statements) or after it (using do statements). Occasionally, how-

ever, we’Il need a loop with an exit point in the middle. We may even want à loop

 

The break Statement

We've already discussed how a break stalement can transfer control out of a
switch statement. The break statement can also be used to jump out of a
while, do, or £or loop.

Suppose that we're writing a program that checks whether a number n is
prime. Our plan is to write a for statement that divides n by the numbers between
2 and n —- !. We should break out of the loop as soon as any divisor is found;
there’s no need to try the remaining possibilities. After the loop has terminated, we
can use an i f statement to determine whether termination was premature (hence n
isn’t prime) or normal (n is prime):

for (d = 2; d < n; d++)
if (n % == 0)
break ;
