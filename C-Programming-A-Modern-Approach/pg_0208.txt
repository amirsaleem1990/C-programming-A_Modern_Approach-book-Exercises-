9.1

Functions

If you have a procedure with ten
parameters, you probably missed some.

We saw in Chapter 2 that a function is simply a series of statements that have been
grouped together and given a name. Although the term “function” comes from
mathematics. C functions don*t always resemble math functions. In C, a function
doesn't necessarily have arguments, nor does it necessarily compute à value. (In
some programming languages, a “function” returns a value, whereas a “’procedure”
doesn*t. C lacks this distinction.)

Functions are the building blocks of C programs. Each function 1s essentially a
smalt program, with its own declarations and statements. Using functions, we can
divide a program into small pieces that are easier for us—and others—to under-
stand and modify. Functions can take some of the tedium out of programming by
allowing us to avoid duplicating code that’s used more than once. Moreover, func-
tions are reusable: wc can take a function that was originally part of one program
and use it in others.

Our programs so far have consisted of just the main function. In this chapter,
we'll see how to write functions other than main, and we’ll learn more about
main itself. Section 9.1 shows how to define and call functions. Section 9.2 then
discusses function declarations and how they differ from function definitions.
Next, Section 9.3 examines how arguments are passed to functions. The remainder
of the chapter covers the return statement (Section 9.4), the related issue of pro-
eram termination (Section 9.5), and recursion (Section 9.6).

 

Defining and Calling Functions

Before we go over the formal rules for defining a function, let’s look at three sim-
ple programs that define functions.

183
