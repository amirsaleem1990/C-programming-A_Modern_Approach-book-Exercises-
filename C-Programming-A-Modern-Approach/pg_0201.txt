176

Chapter8  Arrays

Q:

memcpy function » 23.6

It seems like a designated initializer could end up initializing an array element
more than once. Consider the following array declaration:

int a[] = {4, 9, 1, 8, [0] = 5, 7};

Is this declaration legal, and if so, what is the length of the array? [p. 166]

Yes, the declaration is legal. Here’s how it works: as it processes an initializer list.
the compiler keeps track of which array element is to be initialized next. Normally,
the next element is the one following the element that was last initialized. How-
ever, when a designator appears in the list, it forces the next element be the one
represented by the designator, even if rhat element has already been initialized.

Here ‘s a step-by-step look at how the compiler will process the initializer for
the array a:

The 4 initializes element 0; the next element to be initialized is clement 1.

The 9 initializes element ]: the next eclement to be initialized is element 2.

The | initializes element 2: the next element to be initialized 1s element 3.

The 8 initializes element 3; the next element to be initialized is element 4.

The [0] designator causes the next element to become O, so the 5 initializes
element O (replacing the 4 previously stored there). The next clement to
be initialized 1s element 1.

The 7 initializes element ! (replacing the 9 previously stored there). The next
element to be initialized is element 2 (which is irrelevant since we*re at
the end of the list).

The net effect is the same as if we had written
int a(] = {5, 7, 1, 8};

Thus, the leneth of this array 1s four.

The compiler gives me an error message if I try to copy one array into another
by using the assignment operator. What’s wrong?
Although it looks quite plausible, the assignment

a = b; /* a and b are arrays */

is indeed 1llegal. The reason for its illegality isnt obvious: it has to do with the
peculiar relationship between arrays and pointers in C, a topic we*ll explore in
Chapter 12.

The simplest way to copy one array into another is to use a loop that copies the
elements, one by one:

for (i = O; i < N: i++)
a[i] = bl[i];

Another possibility is to use the memcpy (*memory copy”) function from the
<string.h> header. memcpy 1s a low-leve] function that simply copies bytes
from one place to another. To copy the array b into the array a. use memcpy as
follows:
