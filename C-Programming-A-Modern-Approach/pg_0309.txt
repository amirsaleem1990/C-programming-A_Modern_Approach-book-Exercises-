284

Chapter 13  Strings

/

13.3

 

Using an uninitialized pointer variable as a string is a serious error. Consider the
lollowing example, which attempts to build the string "abc":

char *p;

p[0] = 'a'; /*** WRONG ***/
p[1] = 'b'; /*** NRONG *+**/
p[2] = 'e'; /*** WRONG ***/
p[3] = '\o0'; /*** WRONG *+**/

Since p hasn’t been initialized, we don’t know where it’s pointing. Using the
pointer to write the characters a, b, c, and \0O into memory causes undefined
behavior.

 

Reading and Writing Strings

Writing à string is easy using either the print£ or puts functions. Reading a
string is à bit harder, primarily because of the possibility that the input string may
be longer than the string variable into which it’s being stored. To read a string in a
single step, we can use either scan£ or gets. As an alternative, we can read
strings one character at a time.

Writing Strings Using print£ and puts

The %s conversion specification allows print£ to write a string. Consider the
following example:

char str[] = "Are we having fun yet?";

print£f("%s\n"', str),;
The output will be
Are we having fun yet?

print£ writes the characters in a string one by one until it encounters a null char-
acter. (If the null character is missing, print£ continues past the end of the string
until—eventually—it finds a null character somewhere in memory.)

To print just part of a string, we can use the conversion specification
where p is the number of characters to be displayed. The statement

O

$ .ps,

print£("%.6s\n", str) ;
will print

Are we
