Section 17.6

Section 17.7

]4.

@ 15.

16.

@ 17.

18.

19.

Exercises 455

doesn't work correctly in all cases. Explain what’s wrong with it and show how to fix it.
Assume that the node structure 1s the one defined in Section 17.5.

struct node *insert_into ordered _ list (struct node *list,
( struct node *new node)

struct node *cur = list, *-prev = NULL;
while (cur->value <= new node->value) ({
prev = cur;
cur = cur->next;
}

prev->next = new node;
new_node->next = cur;
return list;

}

Modify the delete from list function (Section 17.5) so that its first parameter has
type struct node ** (a pointer to a pointer to the first node in a list) and its return type is
void. delete from list must modify its first argument to point to the list after the
desired node has been deleted.

Show the output of the following program and explain what it does.

#include <stdio.h>

int f1(int (*f) (int));
int f2 (int i);

int main(void)

{

printf ("Answer: %d\n", f1(f2));
return 0;

}

int f£fl(int (*E) (int))

{

int n = O0;

while ((*f)(n)) n++;
return n;

}

int f2(int i)

{
}

Write the following function. The call sum(g, i, j) should rctum g(i) +… +g(5).

return i #* i + i - 12;

int sum(int (*f) (int), int start, int end);

Let a be an array of 100 integers. Write a call of gsort that sorts only the /as: 50 elements
in a. (You don’t need to write the comparison function).

Modify the compare parts function so that parts are sorted with their numbers in
descending order.

Write a function that, when given a string as its argument. searches the following array of
structures for a matching command name, then calls the function associated with that name.
