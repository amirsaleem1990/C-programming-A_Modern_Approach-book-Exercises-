>.

 

Q & À 405

begin on a multiple of four bytes, the a member of the s structure will be followed
by a three-byte hole. Às à result. sizeo£ (s) will be 8.

By the way, à structure can have a hole at the end, as well as holes between
members. For example. the structure

struct |
int a;
char b;
} s;

might have à three-byte hole after the b member.

Can there be a ‘‘hole” at the beginning of a structure?

No. The C standard specifies that holes are allowed only berveen members or afier
the last member. One consequence 1s that a pointer to the first member of a struc-
ture is guaranteed to be the same as a pointer to the entire structure. (Note, how-
ever, that the Lwo pointers won’t have the same type.)

Why isn’t it legal to use the == operator to test whether two structures are
equal? [p. 382]

This operation was left out of C because therc’s no way to implement it that would
be consistent with the language's philosophy. Comparing structure members one
by one would be too inefficient. Comparing all bytes in the structures would be
better (many computers have special instructions that can perform such a compari-
son rapidly). If the structures contain holes, however, comparing bytes could yreld
an incorrect answer; even 1f corresponding members have 1dentical values. leftover
data stored in the holes might be different. The problem could be solved by having
the compiler ensure that holes always contain the same value (zero. say). Initializ-
ing holes would impose a performance penalty on all programs that use structures,
however, so it’s not feasible.

Why does C provide two ways to name structure types (tags and typedeËf
names)? [p. 382]

C originally lacked typedef, so tags were the only technique available for nam-
ing structure types. When typede£ was added. it was too late to remove lags.
Besides. a tag 1s still necessary when a member of a structure points to a structure
of the same type (see the node structure of Section 17.5).

Can a structure have both a tag and a typede£ name? [p. 384]

Yes. In fact, the tag and the typedef name can even be the same, although that’s
not required:

typedef struct part {
int number;
char name [NAME LEN+1] ;
int on hand;

} part;
