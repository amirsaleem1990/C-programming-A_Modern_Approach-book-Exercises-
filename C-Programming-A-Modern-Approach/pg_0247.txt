222

Chapter 10  Program Organization

#include <stdbool .h> /* C99 only */

#define STACK SIZE 100

/* external variables */
int contents [STACK SIZE] ;
int top = 0;

void make empty (void)

{
}

bool is empty (void)

{
}

bool is full (void)

(
}

void push(int i)

{

top = 0;

return top == O0;

return top == STACK SIZE;

if (is full())

stack _ over£low () ;
else

contents [top++] = i;

}

int pop (void)
{
if (is empty())
stack underflow() ;
else
return contents [--top] ;

Pros and Cons of External Variables

External variables are convenient when many functions must share a variable or
when a few functions share a large number of variables. In most cases, however,
itl’s better for functions to communicate through parameters rather than by sharing

variables. Here’s why:

m f we change an external variable during program maintenance (by altering its
type, say), we’ll need to check every function in the same file to see how the

change affects 1t.
