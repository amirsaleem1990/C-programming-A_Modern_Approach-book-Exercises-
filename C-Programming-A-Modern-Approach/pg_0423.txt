398

Chapter 16  Structures, Unions, and Enumerations

Using Unions to Save Space

We 1l often use unions as a way to save space in structures. Suppose that we're
designing a structure that will contain information about an item that’s sold
through a gift catalog. The catalog carries only three kinds of merchandise: books,
mugs, and shirts. Each i1tem has à stock number and a price, as well as other infor-
mation that depends on the type of the item:

Books: Title, author, number of pages
Mugs: Design

Shirts: Design, colors available, sizes available

Our first design attempt might result in the following structure:

struct catalog item {
int stock _number;
double price;
int item type;
char title [TITLE LEN+1] ;
char author [AUTHOR LEN+1] ;
int num pages;
char design [DESIGN LEN+1] ;
int colors;
int sizes;

} ;

The 1item _type member would have onc of the values BOOK. MUG. or SHIRT.
The colors and sizes members would store encoded combinations of colors
and sizes.

Although this structure is perfectly usable, it wastes space. since only part of
the information in the structure is common to all items in the catalog. If an item is
a book, for example. there’s no necd to store design. colors, and sizes. By
putting a union inside the catalog_item structure, we can reduce the space
required by the structure. The members of the union will be structures, each con-
taining the data that’s necdcd for a particular kind of catalog item:

struct catalog item {
int stock number;
double price;
int item type;
union {
struct |
char title [TITLE LEN+1] ;
char author [AUTHOR LEN+1] ;
int num pages;
} book;
struct {
char design [DESIGN LEN+1] ;

} mug;
