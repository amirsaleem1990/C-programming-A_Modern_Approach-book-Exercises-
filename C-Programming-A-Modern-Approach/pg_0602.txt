sscanf

 

Q&A 577

The sscan£ function is similar t scan£ and fscanf. except that it reads from
à string (pointed to by its first areument) instead of readine from a stream.
sscanf£ ‘s second argument is a format string identical to that used by scanf and
Éscan£.

sscanf is handy for extracting data from a string that was read by another
input function. For example, we might use fgets to obtain a line of input, then
pass the line to sscan£ for l'urther processing:

fgets(str, sizeof(str), stdin); /* reads a line of input */
sscanf (str, "%d%d", &i, &j); /* extracts twvo integers */

One advantage of using sscanf instead of scanf or fscanf is that we can
examine an input line as many times as needed, not just once, making it easier to
recognize alternate input forms and to recover from errors. Consider the problem
ofreading a date that’s written either in the form month/day/vear or month-day-
year. Assuming that str contains a line of input, we can extract the month. day.
and year as follows:

if (sscanf(str, "%d /%d /%d", &month, &day, &year) == 3)
print£ ("Month: %d, day: %d, year: %d\n"', month, day, year) ;
else if (sscanf (str, "%d -%d -%d", &month, &day, &year) == 3)

print£("Month: %d, day: %d, year: %d\n", month, day, year) ;
else
printf ("Date not in the proper form\n'") ;

Like the scan£ and £fscan£ functions, sscanf returns the number of data
items successfully read and stored. sscanf returns EOF if it reaches the end of
the string (marked by a null character) before finding the first item.

Q & À

If 1 use input or output redirection, will the redirected file names show up as
command-line arguments? [p. 541]

No: the operating system removes them from the command line. Let’s say that we
run à program by enterine

demo foo <in file bar >out file baz

The value of argc will be 4, argv[0] will point to the program name,
argv [1] will point to "£oo". argv[2] will point to "bar", and argv (3]
will point to "baz".

] thought that the end of à line was always marked by a new-line character.
Now you're saying that the end-of-line marker varies, depending on the oper-
ating system. How you explain this discrepancy? [p. 542]

C library functions make it appear as though each line ends with a single new-line
