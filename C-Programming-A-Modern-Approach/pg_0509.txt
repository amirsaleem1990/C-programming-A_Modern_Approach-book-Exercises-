484

Chapter 19 Program Design

19.1

some important concepts in program design and show how to use them to create C
programs that are readable and maintatnable.

Section 19.1 discusses how to view a C program as a collection of modules
that provide services to each other. We”1I then see how the concepts of information
hiding (Section 19.2) and abstract data types (Section 19.3) can improve modules.
By focusing on a single example (a stack data type), Section 19.4 illustrates how
an abstract data type can be defined and implemented in C. Section 19.5 describes
some limitations of C for defining abstract data types and shows how to work
around them.

Modules

When designing a C program (or a program in any other language, For that matter).
ils often useful to view it as a number of indépendent modules. À module is a col-
lection of services, some of which are made available to other parts of the program
(the clients). Each module has an interface that describes the available services.
The details of the module—including the source code for the services them-
selves—are stored in the module’s implementation.

In the context of C, “services” are functions. The interface of à module is a
header file containing prototypes for the functions that will be made available to
clients (source files). The implementation of a module is a source file that contains
definitions of the module’s functions.

To illustrate this terminology, let’s look at the calculator program that was
sketched in Sections 15.1 and 15.2. This program consists of the file calc.c.
which contains the main function, and a stack module. which is stored in the files
stack.h and stack. c (see the figure at the top of the next page). calc.c is a
client of the stack module. stack.h is the inrerface of the stack module: it sup-
plies everything the client needs to know about the module. stack.c is the
inplementation of the module; it contains definitions of the stack functions as well
as declarations of the variables that make up the stack.

The C library is itself a collection of modules. Each header in the library
serves as the interface to a module. <stdio.h>. for example, is the interface lo a
module containing I/O functions, while <string. h> is the interface to a module
containing string-handling functions.

Dividing a program into modules has several advantages:

u Abstraction. Tf modules are properly designed, we can treat them as abstrac-
tions, we know what they do, but we don’t worry about the details of how
they do it. Thanks to abstraction, it’s not necessary to understand how the
entire program works in order to make changes lo one part of it. What's more,
abstraction makes it easier for several members of a team to work on the
same program. Once the interfaces for the modules have been agreed upon.
the responsibility for implementing each module can be delegated to a partic-
