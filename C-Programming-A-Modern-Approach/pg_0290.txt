12.3  Using an Array Name as a Pointer 265

bers are still stored in an array: we°re simply using a different technique to keep
track of where we are in the array.

Note that the second argument to scan£ 1s p, not &p. Since p points to an
array element, it’s a satisfactory argument for scanf; &p, on the other hand,
would be a pointer to a pointer to an array element.

Array Arguments (Revisited)

When passed to a function. an array name is always treated as a pointer. Consider
the following function, which returns the largest element in an array of integers:

int find _ largest (int a[], int n)

{

int i, max;

max = a[0];
for (i = 1; i < n; i++)
if (a[i] > max)
max = a[i);
return max;

}
Suppose that we call find _ largest as follows:
largest = find largest (b, N);

This call causes a pointer to the first element of b to be assigned to a: the array
itself isn’t copied.

The fact that an array argument is treated as a pointer has some important con-
sequences:

u When an ordinary variable 1s passed to a function, its value is copied; any
changes to the corresponding parameter don’t affect the variable. In contrast.
an array used as an argument isn’t protected against change, since no copy 1s
made of the array itself. For example, the following function (which we first
saw in Section 9.3) modifies an array by storing zero into each of its elements:

void store _zeros(int al[], int n)

{
int ;
for (i = 0; i < n; i++)
a[li] = O0;
}

To indicate that an array parameter won't be changed, we can include the word
const in its declaration:

int f£find largest (const int a[), int n)

{
}
