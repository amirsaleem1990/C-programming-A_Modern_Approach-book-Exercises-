290

Chapter 13  Strings

/

strncpy lunction »>23.6

There are many functions in <string.h>; l'Il cover a few of the most basic.

In subsequent examples, assume that str1 and str2 are character arrays used as
strings.

The strcpy (String Copy) Function
The strcopy function has the following prototype in <string.h>:
char *strcpy (char *s1, const char *s2);

strcpy copies the string s2 into the string s1. (To be precise, we should say
“strcpy copies the string pointed to by s2 into the array pointed to by s1.”)
That is, strcpy copies characters from s2 to s1 up to (and including) the first
null character in s2. strcopy returns s1 (a pointer to the destination string). The
String pointed to by s2 isn’t modified, so it’s declared const.

The existence of strcpy compensates for the fact that we can’t use the
assignment operator to copy strings. For example, suppose that we want to store
the string "abcd" in str2. We can’t use the assignment

str2 = "abcd"; /*** WRONG ***/

because str2 1s an array name and can’t appear on the left side of an assignment.
Instead, we can call strcopy:

stropy (str2, "abcd") ; /* str2 now contains "abecd" */
Similarly, we can’t assign str2 to str1 directly, but we can call strepy:
stropy(stri1, str2); /* str1 now contains "abed" */

Most of the time, we'll discard the value that stropy returns. On occasion,
though, it can be useful to call stropy as part of a larger expression in order to
use its return value. For example, we could chain together a series of sLrepy
calls:

strcpy(str1, strcopy(str2, "abced")) ;
/* both str1 and str2 now contain "abcd" */

 

In the call stropy(str1, str2). strcopy has no way to check that the string
pointed to by str2 will actually fit in the array pointed to by str1. Suppose that
str1 points to an array of length ». If the string that str2 points to has no more
than n — | characters, then the copy will succeed. But if str2 points to a longer
string, undefined behavior occurs. (Since strcopy always copies up to the first null
character, it will continue copying past the end of the array that str1 points to.)

 

Calling the strnopy function is a safer, albeit slower, way to copy a string.
strncopy is similar to stropy but has a third argument that limits the number of
characters that will be copied. To copy str2 into str1, we could use the follow-
ing call of strncepy:
