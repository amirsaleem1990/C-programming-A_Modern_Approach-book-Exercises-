258

Chapter 12  Pointers and Arrays

Q&AÀ

int a[10], *p;
We can make p point to a [0] by writing
p = &a[0];

Graphically, here’s what we’ve just done:

+
- CT TT

0 1 à 3 4 5 6 7 8 9

 

 

 

 

 

 

 

 

 

We can now access a [0] through p; for example, we can store the value 5 in
a [0] by writing

*p=5;

Here’s our picture now:

 

 

 

Making a pointer p point to an element of an array a isn*t particularly excit-
ing. However. by performing pointer arithmetic (or address arithmetic) on p, we
can access the other elements of a. C supports three (and only three) forms of
pointer arithmetic:

Adding an integer to a pointer
Subtracting an integer from a pointer
Subtracting one pointer from another

Let’s take a close look at each of these operations. Our examples assume that the
following declarations are in effect:

int a[10], *p, *g, i;

Adding an Integer to a Pointer

Adding an integer j to a pointer p yields a pointer to the clement 3 places after the
one that p points to. More precisely, if p points to the array element a [i], then
p + j points to a [i+] ] (provided, of course, that a [i+j] exists).

The following example illustrates pointer addition; diagrams show the values
of p and q at various points in the computation.
