10.3

10.3  Blocks 221

/************************—k*******'k*‘k*‘k******'k**‘k***********

* initialize number generator: Initializes the random *
* number generator using *
* the time of day. *

**'k************'k*****************************************-k/

void initialize number generator (void)

{

srand ( (unsigned) time (NULL) ) ;

}

/********************-k********************************-k-k*-k*

* new secret number: Returns a randomly chosen number *
* between 1l and MAX NUMBER. *

**********************************************************/

int new secret _ number (void)

{

return rand() % MAX NUMBER + 1;

}

/*'k********************************************************

* read guesses: Repeatedly reads user guesses and tells *
* the user whether each guess is too low, *
* too high, or correct. When the guess is *
* correct, prints the total number of *
* quesses and returns. *

*

%* %* % % % * à * % k à à * * à* % à * * % * À* * à k * % x* * % k* * % * * * * * à* * * à * * % à * + * * * * * * * * X /

void read guesses (int secret number)

{

int guess, num guesses = 0;

£for (;;) |

num_guesses++;

printf ("Enter guess: ") ;

scanf ("$d", &quess) ;

if (quess == secret number) {
printf("You won in %d quesses!\n\n", num guesses) ;
return;

} else if (guess < secret number)
print£f ("Too low; try again.\n") ;

else
print£ ("Too high; try agaiïn.\n") ;

l

Blocks

In Section 5.2, we encountered compound statements of the form

{ statements }
