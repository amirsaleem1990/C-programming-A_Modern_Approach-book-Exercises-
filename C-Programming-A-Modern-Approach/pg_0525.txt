500

Chapter 19  Program Design

stackADT3.c

Our implementation will be similar to the one in the stack2. c file of Sec-
tion 19.2. The linked list will consist of nodes, represented by the following struc-
ture:

struct node {
Item data;
struct node *next,;

} ;

The type of the data member is now Item rather than int. but the structure is
otherwise the same as before.
The stack_type structure will contain a pointer to the first node in the list:

struct stack type |{
struct node *top;

} ;

ÀL first glance. the stack type structure seems superfluous; we could just
dcfine Stack to be struct node * and let a Stack value be a pointer to the
first node in the list. However, we still need the stack _ type structure so that
the interface to the stack remains unchanged. (1f we did away with it. any func-
tlon that modified the stack would need a Stack * parameter instead of a
Stack parameter.) Moreover, having the stack _ type structure will make it
easier to change the implementation in the future, should we decide to store addi-
tional information. For example, if we later decide that the stack type struc-
ture should contain a count of how many items are currently stored in the stack,
we can easily add a member to the stack_type struclure to store this informa-
tion.

We won't need to make any changes to the stackADT.h header. (We'll
use this header file, not stackADT2 .h.) We can also use the original stack-
client .c file for testing. All the changes will be in the stackADT. c file.
Here’s the new version:

#include <stdio.h>
#include <stdlib.h>
#finclude "stackADT .h"

struct node {
Item data;
struct node *next;

}

struct stack type {
struct node *top;

}

static void terminate (const char *message)

{

print£("%s\n"', message) ;
exit (EXIT _ FAILURE) ;

)
