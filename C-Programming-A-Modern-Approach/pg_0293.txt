268

Chapter 12  Pointers and Arrays

QaÂÀ

But if we view a as a one-dimensional array of integers (which 1s how 1t’s stored).
we can replace the pair of loops by a single loop:

int *p;

for (p
*p —

&a[0] [0] ; p <= &a [NUM ROWS-1] [NUM COLS-1] ; p++)

!

Ol

The loop begins with p pointing to a [0] [0]. Successive increments of p make
it point to a[0] [1]. a[0] [2]. a[0] [3], and so on. When p reaches
a [0] [NUM COLS-1] (the last element in row O), incrementing it again makes
p point to a [1] [0], the first element in row !. The process continues until p
goes past a [NUM ROWS-1] [NUM _ COLS-1]. the last element in the array.

Although treating a two-dimensional array as one-dimensional may seem like
cheating, it works with most C compilers. Whether it’s a good idea to do so is
another matter. Techniques like this one definitely hurt program readability, but—
at least with some older compilers—produce a compensating iIncrease in effi-
ciency. With many modern compilers, though, there’s often little or no speed
advantage.

Processing the Rows of a Multidimensional Array

What about processing the elements in just one row of a two-dimensional array?
Again, we have the option of using a pointer variable p. To visit the elements of
row i, we'd'initialize p Lo point to element 0 in row i in the array a:

p = &al[i] [0] ;
Or we could simply write
p = alil;

since, for any two-dimensional array a, the expression a [i] is a pointer to the
first element in row i. To see why this works, recall the magic formula that relates
array subscripting to pointer arithmetic: for any array a, the expression a [i] is
equivalent to * (à + i). Thus, &a [i] [0] is the same as &(* (a[i] + O)).
which 1s equivalent to &*a [i], which is the same as a [i]. since the & and *
operators cancel. We'1l use this simplification in the following loop, which clears
row i of the array a:

int a [NUM ROWS] [NUM COLS], *p, i;

a[i]; p < ali] + NUM COLS; p++)

Since a [i] 1s a pointer to row i of the array a, we can pass a [i] toa
function that’s expecting a one-dimensional array as its argument. In other words,
a function that’s designed to work with one-dimensional arrays will also work
with a row belonging to a two-dimensional array. Às a result. functions such as
