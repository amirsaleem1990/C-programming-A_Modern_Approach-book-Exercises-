 

17.4  Deallocating Storage 423

After the first two statements have been executed. p points to one memory block.
while q points to another:

 

 

 

Therc are no pointers to the first block (shaded), so we’Il never be able to use it
again.

À block of memory that’s no longer accessible to a program is said to be gar-
bage. À program that leaves garbage behind has a memory leak. Some languages
provide a garbage collector that automatically locates and recycles garbage, but C
doesn't. Instead, each C program is responsible for recycling its own garbage by
calling the £ree function to release unneeded memory.

The £ree Function
The £ree function has the following prototype in <stdlib.h>:
void free (void *ptr) ;

Using free is easy; we simply pass it a pointer to a memory block that we no
longer need:

p = malloc (...) ;
q = malloc (...) ;
£ree (p) ;

P = q;

Calling £ree releases the block of memory that p points to. This block is now
available for reuse in subsequent calls of malloc or other memory allocation
functions.

 

The argument to free must be a pointer that was previously returned by a mem-
ory allocation function. (The argument may also be a null pointer, in which case
the call of free has no effect.) Passing £ree a pointer to any other objeet (such
as a variable or array element) causes undefined behavior.

 
