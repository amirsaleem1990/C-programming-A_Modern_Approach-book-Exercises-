162

Chapter 8  Arrays

constant expressions >-5.3

e E3N

lvalues > 4.2

idiom

idiom

idiom

The elements of an array may be of any type; the length of the array can be speci-
fied by any (integer) constant expression. Since array lengths may need to be
adjusted when the program is later changed, using a macro to define the length of
an array 1s an excellent practice:

#*define N 10

int a [N] ;

Array Subscripting

To access a particular eclement of an array, we write the array name followed by an
integer value in square brackets (this is referred to as subscripting or indexing the
array). Array elements are always numbered starting from 0, so the elements of an
array of length n are indexed from 0 to n — 1. For example, if à is an array with 10
elements, they’re designated by a [(0], a [1], … a [9], as the following figure
shows:

a[0] a[1] a(2] a[3) alé] a(5] a[6] a[7] a(8] af{e]

 

Expressions of the form a [i] are Ivalues, so they can be used in the same way as
ordinary variables:

a[(0] = 1;
print£f("%d\n", a[5]) ;
++a [i] ;

In general, if an array contains elements of type 7, then each element of the array 1s
treated as if it were a variable of type 7. In this example, the clements a [0O],
a [5]. and a [i] behave like int variables.

Arrays and for loops go hand-in-hand. Many programs contain for loops
whose job is to perform some operation on every element in an array. Here are a
few examples of typical operations on an array a of length N

for (i = O; i < N; i++)
a[i] = O0; /* clears a */
for (i = O; i < N; i++)
scanf ("%d", &a[il); /* reads data into a */
for (i = O; i < N; i++)
sum += a[i]; /* sums the elements o£f a */

Notice that we must use the & symbol when calling scanf£ to read an array ele-
ment, just as we would with an ordinary variable.
