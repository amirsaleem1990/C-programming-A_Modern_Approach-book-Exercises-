Ivalues > 4.2

table of operators > Appandix À

16.1  Structure Variables 381

Not all values listed in a designated initializer need be prefixed by a designa-
tor. (This is true for arrays as well. as we saw 1n Section 8.1.) Consider the follow-
ing example:

{.number = 528, "Disk drive", .on _ hand = 10}

The value "Disk drive" doesn't have a designator, so the compiler assumes
that it initializes the member that follows number in the structure. Any members
that the initializer fails to account for arce set lo Zero.

Operations on Structures

Since the most common array operation is subscripting—selecting an element by
position—it's not surprising that the most common opération on a structure is
selecting one of its members. Structure members are accessed by name, though.
not by position.

To access a member within a structure. we write the name of the structure first,
then a period, then the name of the member. For example, the following statements
will display the values of part1's members:

print£("Part number: %“d\n", part1.number) ;
print£("Part name: %s\n", partl.name) ;
printf ("Quantity on hand: *d\n", partl1.on hand) ;

The members of a structure are [values, so they can appear on the left side of
an assignment or as the operand in an increment or decrement expression:

parti.number = 258; /* changes partl's part number */
part1.on _ hand++; /* increments partl's quantity on hand */

The period that we use to access à structure member ts actually a C operator. l
has the same precedence as the postfix ++ and - - operators. so it takes precedence
over nearly all other operators. Consider the following example:

scanf ("*d", &partl.on hand) ;

The expression &part1l.on hand contains two operators (& and .). The
operator takes precedence over the & operator, so & computes the address of
part1.on hand. as we wished.

The other major structure operation 1S assignment:

part2 = parcl;

The cffect of this statement is to copy part1.number into part2.number,
partl .name into part2 .name, and so on.

Since arrays can‘t be copied using the = operator, it comes as something of a
surprise to discover that structures can. ll's even more surprisine when you con-
sider that an array embedded within à structure is copied when the enclosing struc-
ture is copied. Some programmers exploit Uhis property by creating “’dummy”
structures to enclose arrays that will be copied later:
