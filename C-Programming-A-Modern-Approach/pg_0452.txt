Ivalues » 4.2

 

175  Linked Lists 427

(*new_node) .value = 10;

The -> operator is a combination of the * and . operators; it performs indirection
on new_node to locate the structure that it points to, then selects the value
member of the structure.

The -> operator produces an Ivalue, so we can use it wherever an ordi-
nary variable would be allowed. We’ve just seen an example in which
new_node->value appears on the left side of an assignment. It could just as
easily appear in a call of scanf:

scanf ("%d", &new _node->value) ;

Notice that the & operator is still required, even though new node is a pointer.
Without the &, we*d be passing scan£ the value of new_node->value, which
has type int.

Inserting a Node at the Beginning of a Linked List

One of the advantages of a linked list is that nodes can be added at any point in the
list: at the beginning, at the end, or anywhere in the middle. The beginning of a list
is the easiest place to insert a node, however, so let’s focus on that case.

lfnew _node is pointing to the node to be inserted, and first is pointing to
the first node in the linked list, then we’1l need two statements to insert the node
into the list. First, we’Il modify the new node’s next member to point to the node
that was previously at the beginning of the list:

new_node->next = first;
Second, we’Il make f£irst point to the new node:
first = new node;

Will these statements work if the list is empty when we insert a node? Yes,
fortunately. To make sure this is true, let’s trace the process of inserting two nodes
into an empty list. We’1l insert a node containing the number 10 first, followed by a
node containing 20. In the figures that follow, null pointers are shown as diagonal
lines.

first = NULL; Ç
first

new_node

new_node = malloc (sizeof (struct node) ) ; first

 

 

/J—l___l

new_node

LU'QUE
