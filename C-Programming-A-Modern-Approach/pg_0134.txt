comma expression

macro definitions > 74.3

 

6.3  The for Statement 109

The Comma Operator

On occasion, we might like to write a £or statement with two (or more) initializa-
tion expressions or one that increments several variables each time through the
loop. We can do this by using a commma expression as the first or third expression
inthe £or statement.

À comma expression has the form

expril , expr2

where expr/ and expr2 are any two expressions. À comma expression is evaluated
in two steps: First, expr/ is evaluated and its value discarded. Second, expr2 is
evaluated; its value is the value of the entire expression. Evaluating expr/ should
always have a side effect; if it doesn°t. then expr/ serves no purpose.

For example. suppose that à and j have the values ! and 5, respectively. When
the comma expression ++i, i + j is evaluated, i is first incremented, then i + j
is evaluated, so the value of the expression is 7. (And, of course. i now has the
value 2.) The precedence of the comma operator is less than that of all other opera-
tors, by the way, so there’s no need to put parentheses around ++i and i + j.

Occasionally, we'Il need to chain together a series of comma expressions, just
as we sometimes chain assignments together. The comma operator is left associa-
tive, so the compiler interprets

((à = 1), G = 2)), (K = (i + j))

Since the left operand in a comma expression is evaluated before the right operand.
the assignments i = 1, j = 2, and k = i + j will be performed from left to right.

The comma operator is provided for situations where C requires a single
expression, but we’d like to have two or imore expressions. In other words, the
comma operator allows us to “glue” two expressions together to form a single
expression. (Note the similarity to the compound statement, which allows us to
treat a group of statements as a single statement.)

The need to glue expressions together doesn’t arise that often. Certain macro
definitions can benefit from the comma operator, as we’Il see in a later chapter.
The for statement 1s the only other place where the comma operator is likely to be
found. For example, suppose that we want to initialize two variables when entering
a for statement. Instead of writing
sum = 0;
for (i = 1; l <= N; i++)

sum += i;

we can write
