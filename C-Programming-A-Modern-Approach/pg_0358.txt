14.4

14.4  Conditional Compilation 333

((voltage <= max voltage)?
printf ("Passed test: %s\n", "voltage <= max voltage") :
printf ("Voltage %d exceeds %d\n", voltage, max _ voltage)) ;

When the program is executed, the program will display the message
Passed test: voltage <= max voltage

if voltage is no more than max_voltage. Otherwise, it will display the values
of voltage and max_voltage:

Voltage 125 exceeds 120

The —func  Identifier

Another new feature of C99 is the __ _func___ identifier. _ func__ has nothing
to do with the preprocessor, so it actually doesn’t belong in this chapter. However,
like many preprocessor features, it’s useful for debugging, so l've chosen to dis-
cuss it here.

Every function has access to the __ func __ identifier, which behaves like a
string variable that stores the name of the currently executing function. The effect
is the same as if each function contains the following declaration at the beginning
of its body:

 

static const char _ func_ [] = "function-name" ;

where function-name is the name of the function. The existence of this identifier
makes it possible to write debugging macros such as the following:

#define FUNCTION CALLED() print£f("%s called\n", __fune__);
#define FUNCTION RETURNS() print£f("%s returns\n", __func_ );

Calls of these macros can then be placed inside functions to trace their calls:

void f (void)

{

FUNCTION CALLED () ; /* displays "£ called" */

FUNCTION RETURNS(); /* displays "f returns" */

}

Another use of _ func _ : it can be passed to a function to let it know the name
of the function that called it.

Conditional Compilation

The C preprocessor recognizes a number of directives that support condifional
compilation—the inclusion or exclusion of a section of program text depending on
the outcome of a test performed by the preprocessor.
