674

Chapter 25

lowctrans

> ©

International Features

À call of the towctrans function requires two parameters: wc (a wide char-
acter) and desc (a value returned by wctrans). towctrans maps wc lo
another wide character based on the mapping specified by desc. For example, the
call

towctrans (wc, wctrans ("tolower") )
1s equivalent to
towlower (wc)

towctrans is most useful in conjunction with implementation-defined map-
pines.

Q & À

How long is the locale information string returned by setlocale? [p. 644]

There’s no maximum length, which raises a question: how can we set aside space
for the string if we don't know how long it will be? The answer, of course, is
dynamic storage allocation. The following program fragment (based on a similar
example in Harbison and Steele’s C: À Reference Manual) shows how to deter-
mine the amount of memory needed, allocate the memory dynamically, and then
copy the locale information into that memory:

char *temp, *old_locale;

temp = setlocale(LC ALL, NULL) ;
if (temp == NULL) {

/* locale information not available */
}

old locale = malloc(strlen(temp) + 1);
if (old _ locale == NULL) Ç{

/* memory allocation failed */
}

strcpy (old _locale, temp) ;
We can now switch to a different locale and then later restore the old locale:
setlocale(LC ALL, ""); /* switches to native locale */

setlocale(LC ALL, old_locale) ; /* restores old locale */

Why does C provide both multibyte characters and wide characters?
Wouldn°t cither one be enough by itself? [p. 648]

The two encodings serve different purposes. Multibyte characters are handy for
input/output purposes, since 1/O devices are often byte-oriented. Wide characters.
on the other hand, are more convenient to work with inside a program, since
every wide character occupies the same amount of space. Thus, a program might
