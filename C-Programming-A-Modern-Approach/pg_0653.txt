628

Chapter 24  Error Handling

241

assert

stderr stream >22 1

abort [unction » 26.2

The <assert .h> Header: Diagnostics

void assert (scalar expression) ;

assert, which is defined in the cassert .h> header, allows a program to mon-
itor its own behavior and detect possible problems at an early stage.

Although assert is actually a macro. it’s designed to be used like a func-
tion. It has one argument. which must be an “assertion’—an expression that we
expect to be true under normal circumstances. Each time assert is executed. it
tests the value of its argument. If the argument has a nonzero value, assert does
nothing. If the argument’s value is Zero, assert writes a message to stderr
(the standard error stream) and calls the abort function to terminate program
execution.

For example, let’s say that the file demo. c declares an array a of length 10.
We're concerned that the statement

a[li] = 0O;

in demo.c might cause the program to fail because i isn’t between O and 9. We
can use assert to check this condition before we perform the assignment to
a[il:

assert(0 <= i && i < 10); /* checks subscript first */
a[i] = 0; /* now does the assignment */

If j's value 1s less than O or greater than or equal to 10, the program will terminate
after displaying a message like the following one:

Assertion failed: O <= i && i < 10, file demo.c, line 109

C99 changes assert in a couple of minor ways. The C89 standard states that
the argument to assert must have int type. The C99 standard relaxes this
requirement, allowing the argument to have any scalar type (hence the word scalar
in the prototype for assert). This change allows the argument to be a floating-
point number or a pointer, for example. Also, C99 requires that a failed assert
display the name of the function in which it appears. (C89 requires only that
assert display the argument—in text form—along with the name of the source
file and the source line number). The suggested form of the message is

Assertion failed: expression, function abe, file xyz, line nnn.

The exact form of the message produced by assert may vary from one com-
piler to another. although it should always contain the information required by the
standard. For example. the GCC compiler produces the following message in the
situation described earlier:

a.out: demo.c:109: main: Assertion 0 <= i && i < 10' Ffailed.
