whilte-space characters » 3.2

13.3  Reading and Writing Strings 285

A strins, like a number, can be printed within a field. The $/ns conversion will
display a string in a field of size m. (A string with more than m characters will be
printed in full, not truncated.) If the string has fewer than mm characters, it will be
right-justified within the field. To force left justification instead, we can put a
minus sign in front of m. The n and p values can be used in combination: a conver-
sion specification of the form %,n .ps causes the first » characters of a string to be
displayed in a field of size m.

printf£ isn’t the only function that can write strings. The C library also pro-
vides puts, which 1s used in the following way:

puts (str) ;

puts has only one argument (the string to be printed). After writing the string,
puts always writes an additional new-line character, thus advancing to the begin-
ning of the next output line.

Reading Strings Using scan£ and gets

The %s conversion specification allows scan£ to read a string into a character
array:

scanf ("%s", str) ;

There’s no need to put the & operator in front of str in the call of scan£: like any
array name, str 1s treated as a pointer when passed to a function.

When scanf£ 1s called, it skips white space, then reads characters and stores
them in str until it encounters a white-space character. scan£ always stores a
null character at the end of the string.

À string read using scanf will never contain white space. Consequently,
scanf won’t usually read a full line of input; a new-line character will cause
scanf to stop reading, but so will a space or tab character. To read an entire line
of input at a time, we can use gets. Like scanf, the gets function reads input
characters into an array, then stores a null character. In other respects, however,
gets is somewhat different from scan£:

= gets doesn’t skip white space before starting to read the string (scan£
does).

u gets reads until it finds à new-line character (scan£ stops at any white-
space character). Incidentally, gets discards the new-line character instead of
storing it in the array; the null character takes its place.

To see the difference between scan£ and gets. consider the following pro-
gram f[ragment:

char sentence [SENT LEN+1] ;

print£ ("Enter a sentence:\n") ;
scanf ("%s", sentence) ;
