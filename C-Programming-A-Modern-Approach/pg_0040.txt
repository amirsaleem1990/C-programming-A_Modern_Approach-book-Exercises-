2.3

2.3  Comments 15

The first call of print£f writes To C, or not to C: . The second call writes
that is the question. and advances to the next line. The net effect 1s the
same as the orisinal print £—the user can't tell the difference.

The new-line character can appear more than once in a string literal. To dis-
play the message

Brevity is the soul of wit.
--Shakespeare

we could write

print£("Brevity is the soul of wit.\n --Shakespeare\n") ;

Comments

Our pun. c program still lacks something important: documentation. Every pro-
eram should contain identifying information: the program name, the date written,
the authôr, the purpose of the program, and so forth. In C, this information is
placed in comments. The symbol /* marks the beginning of a comment and the
symbol * / marks the end:

/* This is a comment */

Comments may appear almost anywhere in a program, either on separate lines
or on the same lines as other program text. Here's what pun .c might look like
with comments added at the beginning:

/* Name: pun.c * /
/* Purpose: Prints a bad pun. */
/* Author: K. N. King */

#include <stdio.h>

int main(void)

{

printf("To C, or not to C: that is the question.\n") ;
return 0;

}

Comments may extend over more than one line; once it has seen the / * sym-
bol, the compiler reads (and ignores) whatever follows until it encounters the */
symbol. If we like. we can combine a series of short comments into one long com-
ment:

/* Name: pun.c
Purpose: Prints a bad pun.
Author: K. N. King */

À comment like this can be hard to read, though, because it’s not casy to see where
