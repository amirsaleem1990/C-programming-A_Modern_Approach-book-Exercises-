92

Chapter5  Selection Statements

Which style you use is mainly a matter of taste: there’s no proof that one style
is clearly better than the others. In any event, choosing the right style is less impor-
tant than applying it consistently.

 

Q:
ÂÀ:

labels >6.4

Why doesn’t C99 have a better name for its Boolean type? [p. 85]

_ Bool isn’t a very elegant name, is it? More common names, such as bool or
boolean, weren't chosen because existine C programs might already define
these names, causing older code not to compile.

OK, so why wouldn’t the name _Bool break older programs as well?

The C89 standard specifies that names beginning with an underscore followed by
an uppercase letter are reserved for future use and should not be used by program-
mers.

The template given for the switch statement described it as the ‘“most com-
mon form.” Are there other forms? [p. 87]

The switch statement is a bit more general than described in this chapter.
although the description given here is general enough for virtually all programs.
For example, a switch statement can contain labels that aren’t preceded by the
word case, which leads to an amusing (?) trap. Suppose that we accidentally mis-
spell the word default:

switch (…) |

defual t :

}

The compiler may not detect the error, since it assumes that defualt is an ordi-
nary label.

l’ve scen several methods of indenting the switch statement. Which way is
best?

There are at least two common methods. One is to put the statements in each case
after the case label:

switch (coin) |
case 1: printf ("Cent") ;
break;
case 5:  print£ ("Nickel") ;
break;
case 10: printf ("Dime") ;
break;
