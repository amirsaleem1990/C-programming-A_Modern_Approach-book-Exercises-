default arqument promotions > 9.3

Q & À 209

= Making Quicksort nonrecursive. Although Quicksort is à recursive algorithm
by nature—and is easiest to understand in recursive form—It's actually more
efficient 1f the recursion 1s removed.

For details about improving Quicksort, consult a book on algorithm design, such as
Robert Sedgewick’s Algorithms in C, Parts 1. Fundamentals. Data Structures,
Sorting, Searching, Third Edition (Boston, Mass.: Addison-Wesley, 1998).

Q & À

Some C books appear to use terms other than parameter and argument. Is
there any standard terminology? [p. 184]

As with many other aspects of C, there’s no general agreement on terminology.
although the C89 and C99 standards use parameter and argument. The following
table should help you translate:

This book: Other books:

parameter formal argument, formal parameter
argument actual argument. actual parameter

Keep in mind that—when no confusion would result—I sometimes deliberately
blur the distinction between the two terms. using argiunent to mean either.

l’ve seen programs in which parameter types are specified in separate decla-
rations after the parameter list, as in the following example:

double average(a, b)
double a, b;

{

return (a + b) / 2;

}
Is this practice legal? [p. 188]

This method of defining functions comes from K&R C. so you may encounter it in
older books and programs. C89 and C99 support this style so that older programs
will still compile. l’d avoid using it in new programs, however, for a couple of rea-
sons.

First. functions that are defined in the older way aren’t subject to the same
degree of error-checking. When a function is defined in the older way—and no
prototype is present—the compiler won*t check that the function 1s called with the
right number of arguments, nor will it check that the arguments have the proper
types. Instead, it will perform the default argument promotions.

Second, the C standard says that the older style is ‘“obsolescent,” meaning that
its use is discouraged and that it may be dropped from C eventually.
