 

104

Chapter 6

PROGRAM

Let’s rewrite the countdown example of Section 6.1, using a do statement this
time:

 

, Since 9 is greater than O, the loop body 1s exe-
cuted a second time. This process continues until the message T minus 1 and
counting is printed and i becomes 0. The test i > O now fails, causing the loop

to terminate. As this example shows, AH&TeIS/SmrEmEN TIS OEn iNaisEinEsrbe

 

do
print£f("T minus %d and counting\n", i--);
while (i > O);

À careless reader might think that the word while was the beginning of a while
statement.

Calculating the Number of Digits in an Integer

Although the while statement appears in C programs much more often than the
do statement, the latter is handy for loops that must execute at least once. To illus-
trate this point, let’s write a program that calculates the number of digits in an inte-
ger entered by the user:

Enter a nonnegative integer: 60
The number has 2 digit(s).

Our strategy will be to divide the user’s input by 10 repeatedly until 1
becomes 0; the number of divisions performed is the number of digits. Clearly
we’1! need some kind of loop, since we don°t know how many divisions it will take
to reach 0. But should we use a while statement or a do statement’ The do state-
ment turns out to be more attractive, because every integer—even O—has at least
one digit. Here’s the program:

 
