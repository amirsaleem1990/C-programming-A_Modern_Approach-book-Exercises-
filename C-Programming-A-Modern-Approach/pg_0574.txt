fflush

QaÂÀ

22.2  File Operations 549

 

Be sure that tmpnam’s argument points to an array of at least L_tmpnam charac-
ters. Also. be careful not to call tmpnam too often; the TMP_MAX macro (defined
in <stdio.h>) specifies the maximum number of temporary file names that can
potentially be generated by tmpnam during the execution of à program. If it fails
to generate a file name, tmpnam returns a null pointer.

 

File Buffering

int fflush(FILE *stream) ;

void setbuft (FILE * restrict stream,
char * restrict buË) ;

int setvbuf (FILE * restrict stream,
char * restrict buf,
int mode, size t size);

Transferring data to or from a disk drive is a relatively slow operation. Às a result.
it isn°t feasible for a program to access a disk file directly each time it wants to
read or write a byte. The secret to achieving acceptable performance is buffering:
data written to a stream is actually stored in a buffer area in memory; when it’s full
(or the stream is closed), the buffer 1s ‘’flushed’”’ (written to the actual output
device). Input streams can be buffered in a similar way: the buffer contains data
from the input device; input is read from this buffer instead of the device itself.
Buffering can result in enormous gains in efficiency, since reading a byte from a
buffer or storing a byte in a buffer takes hardly any time at all. Of course, it takes
time to transfer the buffer contents to or from disk, but one large “block move” 1s
much faster than many tiny byte moves.

The functions in <stdio .h> perform buffering automatically when it seems
advantageous. The buffering takes place behind the scenes. and we usually don‘t
worry about it. On rare occasions. though. we may need to take a more active role.
IF so, we can use the functions £flush. setbuf. and setvbuf.

When a program writes outpul to a file, the data normally goes into a buffer
first. The buffer is flushed automatically when it's full or the file 1s closed. By call-
ing fflush, however, a program can flush à file’s buffer as often as it wishes. The
call

fflush(fp) ; /* flushes buffer for £p */
flushes the buffer for the file associated with fp. The call
fflush (NULL) ; /* flushes all buffers */

flushes a!/ output streams. f flush returns zero if it’s successful and EOF if an
error oceurs.
