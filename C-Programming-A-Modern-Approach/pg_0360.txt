#i fdef directive

QaÂ

144  Conditional Compilation 335

will fail (but not generate an error message). while the test
#i£f !DEBUG

will succeed.

The defined Operator

We encountered the # and ## operators in Section 14.3. There’s just one other
operator. def ined. that’s specific to the preprocessor. When applied to an identi-
fier, def ined produces the value | if the identifier is a currently defined macro; it
produces O otherwise. The de£fined operator is normally used in conjunction
with the #i £ directive; it allows us to write

Hif defined (DEBUG)
#endif

The lines between the #i f and #endi £ directives will be included in the program
only if DEBUG is defined as a macro. The parentheses around DEBUG aren (
required; we could simply write

#if defined DEBUG

Since defined tests only whether DEBUG is defined or not, it’‘s not neces-
sary to give DEBUG a value:

Hdefine DEBUG

The #i fdef and #i fnde£f Directives

The #i fdef directive tests whether an identifier is currently defined as a macro:
#i fdef identifier

Using #i fde£ is similar to using #iÉ:

#ifde£ identifier
Lines to be included if identifier is defined as a macro
tendif

Strictly speaking, there’s no need for #ifdef, since we can combine the #if
directive with the def ined operator to get the same effect. In other words, the
directive

#ifde£ identifier
is equivalent to

#if£f defined (identifier)
