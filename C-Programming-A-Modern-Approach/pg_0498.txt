parameterized macros » 14.3

186 Inline Functions (C99) 473

amount of effort on both the part of the f'unction that was called and the one that
called it. The cumulative work required to call a function and later return from it is
often referred to as “overhead’ since itl’s extra work above and beyond what the
function is really supposed to accomplish. Although the overhead of à function call
slows the program by only a tiny amount, it may add up in certain situations, such
as when a function is called millions or billions of times, when an older, slower
processor is in use (as might be the case in an embedded system), or when à pro-
gram has to meet very strict deadlines (as in a real-time system).

In C89. the only way to avoid the overhead of a l'unction call 1s to use à param-
eterized macro. Parameterized macros have certain drawbacks, though, C99 offers
a better solution to this problem: create an inline function. The word ‘inline” sug-
gests an implementation strategy in which the compiler replaces each call of the
function by the machine instructions for the function. This technique avoids the
usual overhead of a function call, although it may cause a minor increase in the
size of the compiled program.

Declaring a function to be inline doesn’t actually force the compiler to
“inline” the function. however, Tt merely suggests that the compiler should try to
make calls of the function as fast as possible, perhaps by performing an inline
expansion when the function is called. The compiler is free to ignore this sugges-
tion. In this respect. inline is similar to the register and restrict key-
words, which the compiler may use to improve the performance of a program but
may also choose to ignore.

Inline Definitions
An inline function has the keyword inline as one of its declaration specifiers:

inline double average (double a, double b)

(
}

Here’s where things get a bit complicated. average has external linkage, so other
source files may contain calls of average. However, the definition of average
isn*t considered to be an external definition by the compiler (it’s an inline defini-
tion instead). so attempting to call average from another file will be considered
an error.

There are two ways Lo avoid this error. One option 1s to add the word static
to the function definition:

return (a + b) / 2;

static inline double average (double a, double b)

{
}

average now has internal linkage. so it can’t be called from other files. Other
files may contain their own definitions of average, which might be the same as
this definition or might be different.

return (a + b) / 2;
