60 Chapter4  Expressions

other assignment operators > 20. 1

QaÂÀ

>

as its left operand. An Ivalue (pronounced “IL-value”) represents an object stored in
computer memory, not a constant or the result of a computation. Variables are lval-
ues: expressions such as 10 or 2 * i are not. At this point, variables are the only
lvalues that we know about; other kinds of Ivalues will appear in later chapters.

Since the assignment operator requires an Ivalue as its left operand, it’s illegal
to put any other kind of expression on the left side of an assignment expression:

12 = j; /*** WRONG ***/
i + j = 0; /*** WRONG #**/
-i = ; /*** WRONG x*x*/

The compiler will detect errors of this nature. and you’I1 get an error message such
as “invalid [value in assignment.”

Compound Assignment

Assignments that use the old value of a variable to compute its new value are com-
mon in C programs. The following statement, for example, adds 2 to the value
stored in i:

 

-= *= /= %=

(We"Il cover the remaining compound assignment operators in a later chapter.) AIl
compound assignment operators work in much the same way:

v += e adds v to e, storing the result in v

v -= e subtracts e from v, storing the result in v

v *= e multiplies v by e. storing the result in v

v /= e divides v by e. storing the result in v

v = e computes the remainder when v is divided by e, storing the result in v

 

 

When using the compound assignment operators, be careful not to switch the two
characters that make up the operator. Switching the characters may yield an
expression that is acceptable to the compiler but that doesn’t have the intended
meaning. For example, il you meant t0 write i += j but typed i =+ j instead, the
