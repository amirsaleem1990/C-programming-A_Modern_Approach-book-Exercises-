338

Chapter 14  The Preprocessor

Qaâ

14.5

#error directive

IT_MAX macro >23.2

= lemporarily disabling code that contains comments. We can‘tuse a / *.* /
comment to “comment out” code that already contains /*...*/ comments.
Instead. we can use an #i f directive:

#Hif£ O
Lines containine comments
tendif

Disabling code in this way is often called ‘“conditioning out.”

Section 15.2 discusses another common use of conditional compilation: pro-
tecting header files against multiple inclusion.

Miscellaneous Directives

To end the chapter, we'Il take a brief look at the #error, #1 ine, and #pragma
directives. These directives are more specialized than the ones we’ve already
examined, and they’re used much less frequently.

The #error Directive

The #error directive has the form

Herror message

where message is any sequence of tokens. If the preprocessor encounters an
#error directive, it prints an error message which must include message. The
exact form of the error message can vary from one compiler to another; it might be
somethinge like

Error directive: nmiexsage
or perhaps just
#error message

Encountering an #error directive indicates a serious flaw in the program; some
compilers immediately terminate compilation without attempting to find other
errors.

terror directives are frequently used in conjunction with conditional com-
pilation to check for situations that shouldn’t arise during a normal compilation.
For example, suppose that we want lo ensure that a program can*t be compiled on
a machine whose int type isn’t capable of storing numbers up to 100,000. The
largest possible int value is represented by the INT_MAX macro, so all we need
do 1s invoke an #error directive if INT MAX 1sn’t at least 100,000:
