184

Chapter9 Functions

PROGRAM

eF3N

Computing Averages

Suppose we often need to compute the average of two double values. The C
lrbrary doesn't have an ‘“‘average” function, but we can easily define our own.
Here’s what it would look like:

double average (double a, double b)

{

return (a + b) / 2;

}

The word double at the beginning is average'’s return type: the type of data
that the function returns each time its called. The identifiers a and b (the func-
tion’s parameters) represent the two numbers that will be supplied when aver-
age is called. Each parameter must have a type (just like every variable has a
type); In this example, both à and b have type double. (It may look odd. but the
word double must appear twice, once for a and once for b.) À function parame-
ter is essentially a variable whose initial value will be supplied later, when the
function 1s called.

Every function has an executable part, called the body. which is enclosed in
braces. The body of average consists of a single return statement. Executing
this statement causes the function to “return” to the place from which it was called:
the value of (a + b) / 2 will be the value returned by the function.

To call à function. we write the function name, followed by a list of argu-
ments. For example, average (x, y) is a call of the average function. Argu-
ments are used to supply information to a function: in this case. average needs
to kKnow which two numbers to average. The effect of the call average (x, y) is
to copy the values of x and y into the parameters a and b. and then execute the
body of average. An argument doesn’t have to be à variable; any expression of a
compatible type will do, allowing us to write average (5.1, 8.9) or aver-
age (x/2, y/3).

We'll put the call of average in the place where we need to use the return
value. For example. we could write

printf ("Average: %g\n", average(x, y));

to compute the average of x and y and then print it. This statement has the follow-
ing effect:

The average function is called with x and y as arguments.

x and y are copied into a and b.

average executes its return statement, returning the average of à and b.
print£ prints the value that average returns. (The return value of
average becomes one of print£'s arguments.)

L tV —

#

Note that the return value of average isn’t saved anywhere; the program prints it
and then discards it. If we had necded the return value later in the program. we
could have captured it in à variable:
