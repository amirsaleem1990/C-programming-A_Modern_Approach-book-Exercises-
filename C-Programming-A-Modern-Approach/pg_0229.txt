204

Chapter9 Functions

9.6

in maïn 1s equivalent to
exit (expression) ;

The difference between return and exit is that exit causes program termina-
tion regardless of which function calls it. The return statement causes program
termination only when it appears in the main function. Some programmers use
exit exclusively to make it easier to locate all exit points in a program.

Recursion

À fünction 1s recursive if it calls itself. For example, the following function com-
putes n! recursively, using the formula n! = n x (n — 1)!:

int fact (int n)

{
if (n <= 1)
return l;
else

return n * fact(n - 1);

}

Some programming languages rely heavily on recursion, while others don’t even
allow it. C falls somewhere in the middle: it allows recursion, but most C program-
mers don t use 1t that often.

To see how recursion works, let*s trace the execution of the statement

i = fact(3);

Here’s what happens:

fact (3) finds that 3 1s not less than or equal to |. so it calls
£act (2). which finds that 2 is not less than or equal to !, so it calls
fact (1), which finds that ! ;s less than or equal to |, so it returns |, causing
£act (2) to return 2 x | = 2. causing
fact (3) toreturn 3 x2=6.

Notice how the unfinished calls of £act “pile up” until £act is finally passed 1.
Ât that point, the old calls of £fact begin to “unwind” one by one, until the origi-
nal call—fact (3) —finally returns with the answer, 6.

Here’s another example of recursion: a function that computes x" using the
formula "*= xx x"",

int power (int x, int n)

{
if (n == O)
return l;
else

return x * power(x, n - 1);
