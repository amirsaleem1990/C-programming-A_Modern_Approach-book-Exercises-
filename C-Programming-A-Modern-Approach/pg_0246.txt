10.2

10.2  External Variables 221

Parameters

Parameters have the same properttes—automatic storage duration and block
scope—as local variables. In fact, the only real difference between parameters and
local vartables 1s that each parameter 1s inttialized automatically when a function 1s
called (by being assigned the value of the corresponding argument).

 

External Variables

Passine arguments 1s one Way lo transmit information to a function. Functions can
also communicate through exfernal variables—variables that are declared outside
the body of any function.

The properties of external variables (or g/obal variables, as they're sometimes
called) are different from those of local variables:

m Sfatic storage duration. External variables have static storage duration, just
lke local variables that have been declared static. À value stored in an
external variable wirll stay there indeffnitely.

u /ile scope. An external vartable huas file scope: 1t 1s visible from ts point of
declaration to the end of the enclosing file. As à result, an external varrable
can be accessed (and potentially modrfied) by all functions that follow rts dec-
laration.

Example: Using External Variables to Implement a Stack

To illustrate how external variables might be used. let’s look at a data structure
known as a sfack, (Stacks are an abstract concept, not a C feature: they can be
implemented in most programming languages.) À stack, like an array, can store
multiple data 1tems of the same type. However, the operations on à stack are lim-
ited: we can either push an item onto the stack (add it to one end—the ‘““stack top”)
or pop it from the stack (remove 1t from the same end). Examining or modifying an
item that’s not at the top of the stack 1s forbidden.

One way 1o implement à stack in C 1s to store its items in an array. which we'Hl
call contents. À separate integer variable named top marks the position of the
stack top. When the stack is empty. top has the value 0. To push an 1tem on the
stack, we simply store the item in contents al the position indicated by top.
then increment top. Popping an item requires decrementing top, then using it as
an index mnto contents to fetch the rtem that's being popped.

Based on this outline, here's a program fragment (not a complete program)
that declares the contents and top variables for a stack and provides a set of
functions that represent operations on the stack. AIl five functions need access to
the top variable, and two functions need access to contents. so we'll make
contents and top external.
