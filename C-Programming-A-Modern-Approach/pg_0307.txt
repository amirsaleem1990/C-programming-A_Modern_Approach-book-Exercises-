282

Chapter 13  Strings

array initializers > 8. ?

The compiler will put the characters from "June 14" in the datel array, then
add a null character so that datel can be used as a string. Here’s what date1
will look like:

 

Although "June 14" appears to be a string literal, it’s not. Instead, C views it as
an abbreviation for an array initializer. In fact, we could have written

char dât€l[8] — {‘J|, nu|' 'D', '€', ! I, '1", |4|' r\on};

1 think you’Il agree that the original version is casier to read.
What 1f the initializer is too short to fill the string variable? In that case, the
compiler adds extra null characters. Thus, after the declaration

char date2[9] = "June 14",;

date2 will have the following appearance:

date2

 

This behavior is consistent with C’s treatment of array initializers in general. When
an array initializer is shorter than the array itself, the remaining elements are ini-
tialized to zero. By initializing the leftover elements of à character array to \ O, the
compiler is followmng the same rule.

What if the initializer is longer than the string variable? That’s illegal for
strings. just as it’s illegal for other arrays. However, C does allow the initializer
(not counting the null character) to have exactly the same length as the variable:

char date3[7] = "June 14";

There’s no room for the null character. so the compiler makes no attempt to store
one:

date3

 

 

If you're planning to initialize a character array to contain a string, be sure that the
length of the array is longer than the length of the initializer. Otherwise, the com-
piler will quietly omit the null character, making the array unusable as a string.

 

The declaration of à string variable may omit its length, in which case the
compiler computes it:

char date4 [] = "June 14";
