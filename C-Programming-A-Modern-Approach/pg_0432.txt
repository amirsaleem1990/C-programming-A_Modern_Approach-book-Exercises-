Section 16.1

O- » À

l

Exercises 407

enum gray_values {
BLACK = O,
DARK GRAY = 64,
GRAY = 128,
LIGHT_GRAY = 192,

Is this practice legal?
This practice is indced legal in C99 (and is supported by some pre-C99 compilers as
well). Allowing a “trailing comma” makes enumerations easier to modify, because

we can add a constant to the end of an enumeration without changing existing lines
of code. For example. we might want to add WHITE Lo our enumeration:

enum gray_values ({
BLACK = O,
DARK GRAY = 64,
GRAY = 128,
LIGHT GRAY = 192,
WHITE = 255,

}7

The comma after the definition of LIGHT GRAY makes it easy to add WHITE to
the end of the list.

One reason for this change is that C89 allows trailing commas in initializers,
so it seemed inconsistent not to allow the same flexibility in enumerations. Inci-
dentally, C99 also allows trailing commas in compound literals.

Can the values of an enumerated type be used as subscripts?

Yes, iIndeed. They are integers and have—by default—values that start at 0 and
count upward, so they make great subscripts. In C99, morcover, enumeration con-
stants can be used as subscripts in designated initializers. Here’s an example:

enum weekdays {MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY} ;

const char *daily specials[] = {
[MONDAY] = "Beef ravioli",
[TUESDAY] = "BLTs",
[WEDNESDAY] = "Pizza",
[THURSDAY] = "Chicken Fajitas",
[FRIDAY] = "Macaroni and cheese"
}
Exercises

In the following declarations, the x and y structures have members named x and y:

struct { int x, y; } x;
struct { int x, y; } y;

Are these declarations legal on an individual basis? Could both declarations appear as
shown in a program? Justify your answer.
