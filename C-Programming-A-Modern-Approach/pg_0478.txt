Section 17.1

Section 17.2

Section 17.3

Section 17.5

D

Lo

Exercises 453

int compare strings(const void *p, const void *q)

{
}

Now my program compiles, but qsort doesn’t seem to sort the array. What
am Î doing wrong?

return stremp(p, q);

First, you can’t pass strcemp itself to gsort, since gsort requires a comparison
function with two const void * parameters. Your compare strings func-
tion doesn't work because it incorrectly assumes that p and q are strings (char *
pointers). In fact, p and q point to array elements containing char * pointers. To
fIx compare strings, we’Il cast p and g lo type char **, then use the *
operator to remove one level of indirection:

int compare _ strings(const void *p, const void *g)

(
}

return stremp (* (char **)p, * (char **)q) ;

Exercises

Having to check the return value of malloc (or any other memory allocation function)
each time we call it can be an annoyance. Write a function named my_malloc that serves
as a “wrapper” for malloc. When we call my_malloc and ask it to allocate n bytes, it in
turn calls malloc, tests to make sure that malloc doesn’t return a null pointer, and then
returns the pointer from malloc. Have my_malloc print an error message and terminate
the program i1f malloc returns a null pointer.

Write à function named dupliicate that uses dynamic storage allocation to create à copy
of a string. For example, the call

p = duplicate(str) ;

would allocate space for a string of the same length as str. copy the contents of str into
the new string, and return a pointer to it. Have duplicate return a null pointer if the
memory allocation fails.

Write the following function:
int *create _array(int n, int initial value) ;

The function should return à pointer to a dynamically allocated int array with n members.
each of which is initialized to initial _value. The return value should be NULL if the
array can’t be allocated.

Suppose that the following declarations arc in effect:

struct point { int x, y; };
struct rectangle { struct point upper left, lower right; };
struct rectangle *p;
