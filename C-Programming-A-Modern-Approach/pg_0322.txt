136 String Idioms 297

size t strlen(const char #s)

size t n = 0;
for (; *s != '\O'; Ss++)
n++;
return n;
Next. we notice that the condition *s != '\O' is the same as *s != O, because

the integer value of the null character is O. But testing *s ! = O is the same as test-
ing *s; both are true if *s isn’t equal to 0. These observations lead to our next ver-
sion of strlen:

size t strlen(const char *s)

size t n = 0;

for (; *s; s++)
n++,;

return n;

But, as we saw in Section 12.2, it’s possible to increment s and test *s in the same
expression:

size t strlen(const char *s)

size t n = 0;

for (; *s++;)
n++;

return n;

Replacins the for statement with a while statement, we arrive at the following
version of strlen:

size t strlen(const char *s)

{
size t n = Q0;
while (*s++)
n++ ;
rveturn n;
}

Although we’ve condensed strlen quite a bit, it’s likely that we haven*t in-
creased its speed. Here”s a version that does run faster. at least with some compilers:

size t strlen(const char *s)

{

const char *p = s;
