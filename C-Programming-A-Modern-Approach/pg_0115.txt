90

Chapter5  Selection Statements

case 3: case 23:
printf ("rd") ; break;
default: print£ ("th") ; break;

}

print£f(" day of ") ;

switch (month) |
case 1: print£ ("January") ; break;
case 2: printf("February");  Dbreak;
case 3 print£f ("March") ; break ;
case 4 print£ ("April") ; break;
case 5:  print£ ("May") ; break;
case 6:  print£ ("June") ; break;
case 7 print£ ("July") ; break;
case 8: print£ ("August") ; break ;
case 9: printf ("September") ; break;
case 10: print£ ("October") ; break;

case 11: printf("November");  break;
case 12: printf ("December");  break;

}

print£(", 20%.2d.\n", year) ;
return 0;

;

Note the use of % . 2d to display the last two digits of the year. If we had used
&d instead, single-digit years would be displayed incorrectly (2005 would be
printed as 205).

Q & À

My compiler doesn’t give a warning when I use = instead of ==. Is there some
way to force the compiler to notice the problem? [p. 77]

Here’s a trick that some programmers use: instead of writing
if (iài == O)

they habitually write

if (O == i)

Now suppose that the == operator is accidentally written as =:
if (O = i)

The compiler will produce an error message. since it’s not possible to assign a
value to 0. ! don’t use this trick, because I think it makes programs look unnatural.
Also, it can be used only when one of the opcrands in the test condition isn’t an
Ivalue.

Fortunately, many compilers are capable of checking for suspect uses of the =
operator in if conditions. The GCC compiler, for example, will perform this
