68 Chapter 4  Expressions

Section 4.1

e$e
“ °
.

When [ use the postfix version of ++ or --, just when is the increment or dec-
rement performed? [p. 62]

That's an excellent question. Unfortunately, it’s also a difficult one to answer. The
C standard introduces the concept of “sequence point” and says that ’updating the
stored value of the operand shall occur between the previous and the next sequence
point.’ There are various kinds of sequence points in C: the end of an expression
statement is one example. By the end of an expression statement, all increments
and decrements within the statement must have been performed; the next statement
can’t begin to execute until this condition has been met.

Certain operators that we’ll encounter in later chapters (logical and, logical or,
conditional, and comma) also impose sequence points. So do function calls: the
arguments in a function call must be fully evaluated before the call can be per-
formed. If an areument happens to be an expression containing à ++ Or -- opera-
tor, the increment or decrement must occur before the call can take place.

What do you mean when you say that the value of an expression statement is
discarded? [p. 65]

By definition, an expression represents a value. If i has the value 5, for example,
then evaluating i + 1 produces the value 6. Let’s turn i + 1 into a statement by
putting a semicolon after 1t:

i + 1;

When this statement is executed, the value of i + 1 is computed. Since we have
failed to save this value—or at least use it in some way—it 1s lost.

But what about statements like i = 1 ; ? l don°t see what is being discarded.

Don't forget that = is an operator in C and produces a value just like any other
operator. The assignment

1 = 1;

assigns | to i. The value of the entire expression is |, which is discarded. Discard-
ing the expression’s value 1s no great loss, since the reason for writing the state-
ment in the first place was to modify i.

Exercises

Show the output produced by cach of the following program fragments. Assume that i. j.
and k are int variables.
(a) i = 5; j = 3;
print£("%d $d", i / j, i $ j);
(b) i = 2; j = 3;
printf("%d", (i + 10) % j);
(c) i = 7; j = 8; k ;
printf("%$d", (i + 10) % k / j);

Il
Lo
