12

Chapter2 C Fundamentals

2.2

QaâÂ

headers > 152

The General Form of a Simple Program

Let’s take a closer look at pun . c and see how we can generalize it a bit. Simple C
programs have the form

directives

int main(void)

{
}

In this template, and in similar templates elsewhere in this book, items printed in
Courier would appear in a C program exactly as shown: items in ifalics repre-
sent text to be supplied by the programmer.

Notice how the braces show where main begins and ends. C uses { and } in
much the same way thai some other languages use words like begin and end.
This illustrates a general point about C: it relies heavily on abbreviations and spe-
cial symbols, one reason that C programs are concise (or—less charitably—cryp-
tic).

Even the simplest C programs rely on three key language features: directives
(editing commands that modify the program prior to compilation), Functions
(named blocks of executable code, of which main 1s an example), and statements
(commands to be performed when the program is run). We'Il take a closer look at
these features now.

staterments

Directives

Before a C program 1s compiled, it is first edited by a preprocessor. Commands

intended for the preprocessor are called directives. Chapters 14 and 15 discuss

directives in detail. For now, we're interested only in the Zinclude directive.
The pun.. c program begins with the line

Hinclude <stdio.h>

This directive states that the information in <stdio.h> 1s to be “included” into
the program before it is compiled. <stdio .h> contains information about C’s
standard 1/O library. C has à number of headers like <stdio .h>: each contains
information about some part of the standard library. The reason we’re including
<stdio.h> 1s that C, unlike some programminge languages, has no built-in
‘“’read” and “write” commands. The ability to perform input and output is provided
instead by functions in the standard library.

Directives always begin with a # character, which distinguishes them from
other items in a C program. By default, directives are one line long: thère’s no
semicolon or other special marker at the end of a directive.
