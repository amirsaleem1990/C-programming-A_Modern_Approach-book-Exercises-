Qaâ

 

17.5  Linked Lists 425

amount of time: accessing a node in a linked list is fast if the node is close to the
beginning of the list, slow if it’s near the end.

This section describes how to set up a linked list in C. It also shows how to
perform several common operations on linked lists: inserting a node at the begin-
ning of a list, searching for a node, and deleting a node.

Declaring a Node Type

To set up a linked list, the first thing we'Il need is a structure that represents à sin-
gle node in the list. For simplicity, let’s assume that a node contains nothing but an
integer (the node’s data) plus a pointer to the next node in the list. Here's what our
node structure will look like:

struct node {
int value; /* data stored in the node */
struct node *next; /* pointer to the next node */

}

Notice that the next member has type struct node *, which means that it can
store à pointer to a node structure. There’s nothing special about the name node.
by the way: il’s just an ordinary structure tag.

One aspect of the node structure deserves special mention. As Section 16.2
explained, we normally have the option of using cither a tag or a typedef name
to define a name for a particular kind of structure. However, when a structure has a
member that points to the same kind of structure. as node does. we*re required to
use à structure tag. Without the node tag, we'd have no way to declare the type of
next.

Now that we have the node structure declared. we’1] need a way to keep track
of where the list begins. In other words. we1l need a variable that always points to
the first node in the tist. Let*s name the variable first:

struct node *first = NULL;

Setting £irst to NULL indicates that the list is initially empty.

Creating a Node

Âs we construct a linked list, we*Il want to create nodes one by one, adding each to
the list. Creating a node requires three steps:

1. Allocate memory for the node.
2. Store data in the node.
3. Insert the node into the list.

We'1l concentrate on the first two steps for now.
When we creale a node. we'Il need à variable that can point to the node tem-
porarily, until itl’s been inserted into the list, Let’s call this variable new _node:

struct node *new node;
