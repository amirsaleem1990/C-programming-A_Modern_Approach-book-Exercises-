20.2  Bit-Fields in Structures 517

according to Microsoft). After these assignments, the £d variable will have the fol-
lowing appearance:

 

 

15 1218 13 12 11 10 89 8 7 6 5 â 3 2 1 Û

We could have used the bitwise operators to accomplish the same effect: using
these operators might even make the program a little faster. However, having a
readable program 1s usually more important than gaining a few microseconds.

Bit-fields do have one restriction that doesn’t apply to other members of a
structure. Since bit-ficlds don’t have addresses in the usual sense, C doesn’t allow
us to apply the address operator (&) to a bit-field. Because of this rule, functions
such as scan£ can’t store data directly in a bit-field:

scanf ("#d", &fd. day) ; /*** WRONG ***/

Of course, we can always use scan£ (o read input into an ordinary variable and
then assign it to £d.day.

How Bit-Fields Are Stored

Let’s take a close look at how a compiler processes the declaration of a structure
that has bit-field members. Às we’Il see, the C standard allows the compiler con-
siderable latitude in choosing how 1t stores bit-fields.

The rules concerning how the compiler handles bit-fields depend on the notion
of “storage units.” The size of a storage unit is implementation-defined: typical
values are 8 bits, 16 bits, and 32 bits. ÀS 1t processes a structure declaration, the
compiler packs bit-fields one by one into a storage unit, with no gaps betwcen the
fields, until there’s not enough room for the next field. At that point, some compil-
ers skip to the beginning of the next storage unit, while others split the bit-field
across the storage units. (Which one occurs is implementation-defined.) The order
in which bit-fields are allocated (left to right or right to left) is also implementa-
tion-defined.

Our file date example assumes that storage units are |6 bits long. (An 8-
bit storage unit would also be acceptable. provided that the compiler splits the
month field across two storage units.) We also assume that bit-fields are allocated
from right to left (with the first bit-field occupying the low-order bits).

C allows us to omit the name of any bit-field. Unnamed bit-fields are useful as
‘“padding” to ensure that other bit Felds are properly positioned. Consider the time
associated with a DOS file, which is stored in the following way:

struct file time |
unsigned int seconds: S;
unsigned int minutes: 6;
unsigned int Hours: 5;

};
