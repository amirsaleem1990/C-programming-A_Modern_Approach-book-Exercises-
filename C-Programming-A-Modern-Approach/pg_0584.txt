æ

mullibyte characters » 25.2

idiom

white-space characters » 3.2

22.3  Formatited I/0O 559

scanf always reads fromn stdin (the standard input stream), whereas
fscanf£ reads from the stream indicated by 1ts first argument:

scanf ("$d%$d", &i, &]j); /* reads from stdin */
Éscanf (fp, "%“d&d", &i, &j); /* reads from £fp */

À call of scan£ 1s equivalent to à call of £scanf with stdin as the first argu-
ment.

The …scanf£ functions return prematurely 1f an irput failure occurs (no more
input characters could be read) or if a matching failure occurs (the input charac-
ters didn’t match the format string). (In C99. an input failure can also oceur
because of an encoding error, which means that an attempt was made lo read a
multibyte character, but the input characters didn’t correspond to any valid multi-
byte character.) Both functions return the number of data items that were read and
assigned to objects; they return EOF 1l an input failure occurs before any data items
can be read.

Loops that test scan£'s return value are common in C programs. The follow-
ing loop. for example, reads a series of integers one by one. stopping at the first
sign of trouble:

while (scanf("%d", &i) == 1) |

}

…scanf Format Strings

Calls of the ….scanf functions resemble those of the ….printf functions. That
similarity can be misleading, however; the …scan£ functions work quite differ-
ently from the …printf functions. It pays to think of scan£ and £scant as
“pattern-matching” functions. The format string represents a pattern that a
…Scanf function attempts to match as it reads input. If the input doesn't match
the format string, the function returns as soon as it detects the mismatch; the input
character that didn’t match 1s “pushed back” to be read in the future.
À .…scanf£ format string may contain three things:

w Conversion specifications. Conversion specifications in a …scan£ format
string resemble those in a….printf£ format string. Most conversion specifica-
tions skip white-space characters at the beginning of an input item (the excep-
tions are $ [. $c, and Sn). Conversion specifications never skip trailine white-
space characters, however. If the input contains e1237, the %d conversion
specification consumes e, 1, 2, and 3, but leaves 9 unread. (l’m using e to
represent the space character and © to represent the new-line character.)

= White-space characters. One or more consecutive white-space characters In a
…Scanf format string match zero or more white-space characters in the input
stream.

= Non-white-space characters. À non-white-space character other than % matches
the same character in the input stream.
