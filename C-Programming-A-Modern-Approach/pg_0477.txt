452

Chapter 17  Advanced Uses of Pointers

À:

Yes, there 1s. Some programmers use the following idiom when calling malloc to
allocate memory for a single object:

p = malloc (sizeoË (*p)) ;

Since sizeof (*p) 1s the size of the object to which p will point. this statement
guarantees that the correct amount of memory will be allocated. At first glance.
this idiom looks fishy: 10s likely that p 1s uninitialized, making the value of *p
undefined. However. sizeof doesn't evaluate *p. it merely computes its size, so
the idiom works even 1f p 1s uninitialized or contains a null pointer.

To allocate memory for an array with n elements, we can use a slightly modi-
fied version of the idiom:

p = malloc(n * sizeof (*p));

Why isn°t the gsort function simply named sort? [p. 440]

The name gsort comes from the Quicksort algorithm published by C. A. R.
Hoare in 1962 (and discussed in Section 9.6). Ironically, the C standard doesn't
require that qsort use the Quicksort algorithm. although many versions of
qsort do.

Isn’t it necessary to cast qsort?s first argument to type void *, as in the fol-
lowing example? [p. 441]

qsort ((void *) inventory, num parts, sizeof(struct part),
compare parts) ;

No. À pointer of any type can be converted to void * automatically.

J want to use gsort to sort an array of integers, but l’m having trouble writ-
ing a comparison function. What*s the secret?

Here's a version that works:

int compare ints(const void *p, const void *g)

{
}

Bizarre. eh? The expression (int *)p casts p to type int *, so * (int *)p
would be the integer that p points to. À word of warning, though: Subtracting two
integers may cause overflow. If the integers being sorted are completely arbitrary,
1s safer to use i £ statements to compare * (int *) p with * (int *) q.

return * (int *)p - *(int #*)g;

[ needed to sort an array of strings, so I figured d just use stromp as the
comparison function. When Ll passed it to qgsort, however, the compiler gave
me a warning. | tried to tix the problem by embedding strcmp in a compari-
son function:
