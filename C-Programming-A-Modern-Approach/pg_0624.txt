FLT _ EVAL METHOD >23,.1

 

23.4  The <math.h> Header (C99): Mathematics 599

digit to the left of the binary point. When a number gets small enough, how-
ever, it’s stored in a different format in which it’s not normalized. These sub-
normal numbers (also known as denormalized numbers or denormals) can
be much smaller than normalized numbers: the trade-off is that they get pro-
gressively less accurate as they get smaller.

m Special values. Each floating-point format allows the representation of three
special values: positive infinity, negative infinity, and NaN (“not a number”).
Dividing a positive number by zero produces positive infinity. Dividing a neg-
ative number by zero yields negative infinity. The result of a mathematically
undefined operation, such as dividing zero by zero, is NaN. (It's more accurate
to say “the result is à NaN” rather than “the result is NaN.” because the IEEE
standard has multiple representations for NaN. The exponent part of a NaN
value is all 1 bits, but the fraction can be any nonzero sequence of bits.) Spe-
cial values can be operands in subsequent operations. Infinity behaves just as
it does in ordinary mathematics. For example, dividing a positive number by
positive infinity yields zero. (Note that an arithmetic expression could produce
infinity as an intermediate result but have a noninfinite value overall.) Per-
forming any operation on NaN gives NaN as the result.

=m Rounding direction. When a number can’t be stored exactly using a floating-
point representation, the current rounding direction (or rounding mode)
determines which floating-point value will be selected to represent the num-
ber. There are four rounding directions: (1) Round toward nearest. Rounds to
the nearest representable value. If a number falls halfway between two values,
it is rounded to the “even” value (the one whose least significant bit is zero).
(2) Round toward zero. (3) Round toward positive infinity. (4) Round toward
negative infinity. The default rounding direction is round toward nearest.

=m Exceptions. There are five types of floating-point exceptions: overflow, under-
flow, division by zero, invalid operation (the result of an arithmetic operation
was NaN), and inexact (the result of an arithmetic operation had to be
rounded). When one of these conditions is detected, we say that the exception
1s raised.

Types

C99 adds two types, float t and double_t. to <math.h>. The float_t
type is at least as “wide” as the float type (meaning that it could be the float
type or any wider type, such as double). Similarly, double_ t is required to be
at least as wide as the double type. (It must also be at least as wide as
£loat _ t.) These types are provided for the programmer who’s trying to maxi-
mize the performance of floating-point arithmetic. float_t should be the most
efficient floating-point type that’s at least as wide as float; double_t should
be the most efficient floating-point type that’s at least as wide as double.

The float t and double t types are related to the FLT_EVAL METHOD
macro, as shown in Table 23.8.
