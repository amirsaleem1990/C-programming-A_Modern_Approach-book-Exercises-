PROGRAM

13.7  Arrays of Strings 303

name, argv [1] will point to the string "-1", argv [2] will point to the string
"remind.c", and argv [3] will be a null pointer:

argv

——> program name

 

 

" - [1 |\o

 

——>

 

 

 

m |i |n }d l.l cl\0î

    

 

 

This figure doesn’t show the program name in detail, since it may include a path or
other information that depends on the operating system. If the program name isn°t
available, argv [0] points to an empty string.

Since arqv is an array of pointers. accessing command-line areuments is
easy. Typically, a program that expects command-line arguments will set up a loop
that examines each argument in turn. One way to write such a loop is to use an
integer variable as an index into the argv array. For example, the following loop
prints the command-line arguments, one per line:

int i;

for (i = 1; i < argc; i++)
print£("%s\n"', argv[il);

Another technique 1s to set up a pointer to argv [1], then increment the pointer
repeatedly to step through the rest of the array. Since the last element of argv 1s al-
ways a null pointer, the loop can terminate when it finds à null pointer in the array:

char **p;

for (p = &argv[1]; *p != NULL; p++)
print£f("%s\n", *p) ;

Since p 1s à pointer to à pointer 10 a character, we’ve got to use it carefully. Setting
p equal to &argv [1] makes sense; argv [1] is a pointer to a character, so
&argv [1] will be a pointer to a pointer. The test *p != NULL is OK, since *p
and NULL are both pointers. Incrementing p looks good; p points to an array ele-
ment, so incrementing it will advance it to the next element. Printing *p is fine,
since *p points to the first character in a string.

Checking Planet Names

Our next program, planet . c, illustrates how to access command-line argu-
ments. The program 1s designed to check a series of strings to see which ones are
names of planets. When the program is run. the user will put the strings to be tested
on the command line:

planet Jupiter venus Earth f£red
