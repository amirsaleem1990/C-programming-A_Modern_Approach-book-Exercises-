384

Chapter 16  Structures, Unions, and Enumerations

linked lists » 775

struct part {
int number;
char name [NAME LEN+1] ;
int on hand;

} part1l, part2;

Here, we ve declared a structure tag named part (making 1t possible to use part
later to declare more variables) as well as variables named part1 and part2.

AIl structures declared to have type struct part are compatible with one
another:

struct part partl = {528, "Disk drive", 10};
struct part part2;

part2 = partl; /* legal; both parts have the same type */

Defining a Structure Type

Às an alternative to declaring à structure tag. we can use typede£ to define a
genuine type name. For example. we could define a type named Part 1n the fol-
lowing way:

typedef struct {
int number;
char name [NAME LEN+1] ;
int on hand;

} Part;

Note that the name of the type. Part. must come at the end. not after the word
struct.

We can use Part in the same way as the built-in types. For example. we
mieht use it to declare variables:

Part partl, part2;

Since Part 1s à typedef name. we're not allowed to write struct Part. AIl
Part variables. regardless of where thev‘re declared, are compatible.

When it comes time to name a structure, we can usually choose cither to
declare a structure tag Or Lo use typedef. However. as we'Il sec later, declaring à
structure tag is mandatory when the structure 1s to be used in a linked list. PIl use
structure tags rather than typede£ names In most of my examples.

Structures as Arguments and Return Values

Functions may have structures as arguments and return values. Let’s look at two
examples. Our first function. when given a part structure as its argument. prints
the structure’s members:

void print part (struct part p)

(

printf ("Part number: %d\n", p.number) ;
