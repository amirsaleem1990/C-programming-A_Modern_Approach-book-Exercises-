16

16.1

Structures, Unions, and
Enumerations

Functions delay binding: data structures induce binding.
Moral: Structure data late in the programming process.

This chapter introduces three new types: structures, unions. and enumerations. À
structure is à collection of values (members). possibly of different types. À union
is similar to à structure. except that its members share the same storage: as à result,
à union can storc one member at a time. but not all members simultancously. An
enumeration is an intéger type whose values are named by the programmer.

Of these threc types. structures are by far the most important, so l'IL devote
most of the chapter to them. Section 16.1 shows how to declare structure variables
and perform basic operations on them. Section 16.2 then explains how to define
structure types. which—among other things—allow us to write functions that
accept structure arguments or retum structures. Section 16.3 explores how arrays
and structures can be nested. The last two sections are devoted to unions (Section
16.4) and enumerations (Section 16.5).

 

Structure Variables

The only data structure wc*ve covered so far is the array. Arrays have two impor-
tant properties. First, all elements of an array have the same type. Second, to select
an array clement. we specify its position (as an integer subscript).

The properties of à structure are quite different from those of an array. The
elements of à structure (its members. in C parlance) aren’t required to have the
sume type. Furthermore. the members of à structure have names: to select à partic-
ular member, we specify its name, not its position.

Structures may sound familiar, since most programming languages provide a
similar feature. In some languages. structures are called records, and members arc
known as fields.

377
