300

Chapter 13  Strings

idiom

13.7

The heart of our streamlined strcat function is the “strine copv” idiom:
& COp

while (*p++ = *s2++)

’

If we ignore the two ++ operators, the expression inside the parentheses simplifies
to an ordinary assignment:

*p = *s2

This expression copies a character from where s2 points to where p points. After
the assignment, both p and s2 are incremented, thanks to the ++ operators.
Repeatedly executing this expression has the effect of copying a series of charac-
ters from where s2 points to where p points.

But what causes the loop to terminate? Since the primary operator inside the
parentheses is assignment, the while statement tests the value of the assign-
ment—the character that was copied. All characters except the null character test
true, so the loop won’t terminate until the null character has been copied. And
since the loop terminates affer the assignment, we don’t need a separate statement
to put a null character at the end of the new strine.

Arrays of Strings

Let's now turn to a question that we’1l often encounter: what’s the best way to store
an array of strings? The obvious solution is to create a two-dimensional array of
characters, then store the strings in the array, one per row. Consider the following
example:

char planets[{] [8] = {"Mercury", "Venus", "Earth",
"Mars", "Jupiter", "Saturn",
"Uranus", "Neptune", "Pluto"};

(In 2006, the International Astronomical Union demoted Pluto from “planet” to
“dwarf planet,” but l’ve left it in the planets array for old times’ sake.) Note that
we’re allowed to omit the number of rows in the planets array—since that's
obvious from the number of elements in the initializer—but C requires that we
specify the number of columns.

The figure at the top of the next page shows what the planets array will
look like. Not all our strings were long enough to fil] an entire row of the array, so
C padded them with null characters. There’s a bit of wasted space in this array,
since only three planets have names long enough to require eight characters
(including the terminating null character). The remind. c program (Section 13.5)
IS a glaring example of this kind of waste. It stores reminders in rows of a two-
dimensional character array, with 60 characters set aside for each reminder. In our
example, the reminders ranged from 18 to 37 characters in length, so the amount of
wasted space was considerable.
