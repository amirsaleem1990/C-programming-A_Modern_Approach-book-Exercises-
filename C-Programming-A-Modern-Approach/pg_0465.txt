440

Chapter 17  Advanced Uses of Pointers

sin lunction >23.3

QaÂ

à double parameter and return a double result, the prototype for integrate
will look like this:

double integrate (double (*£f) (double), double a, double b):;

The parentheses around * £ indicate that £ is a pointer to a function, not a function
that returns a pointer. It’s also legal to declare £ as though it were a function:

double integrate (double f (double), double a, double b);

From the compiler”s standpoint, this prototype is identical to the previous one.

When we call integrate, we'’Il supply a function name as the first argu-
ment. For example, the following call will integrate the sin (sine) function from O
to 77/2:

result = integrate(sin, 0.0, PI / 2);

Notice that there arc no parentheses after sin. When a function name isn’t fol-
lowed by parentheses, the C compiler produces a pointer to the function instead of
generating code for à function call. In our cxample, we're not calling sin; instead.
we're passing integrate a pointer to sin. If this seems confusing. think of how
C handles arrays. If à is the name of an array, then a [i] represents one element of
the array, while a by itself serves as a pointer to the array. In a similar way, if £ is a
function, C treats £ (x) as a call of the function but £ by itself as a pointer to the
function.
Within the body of integrate, we can call the function that £ points to:

y = (*f) (x);

* £ represents the function that £ points to: x is the argument to the call. Thus, dur-
ing the execution of integrate (sin, 0.0, PI / 2). each call of *F is actu-
ally à call of sin. As an alternative to (*£) (x), C allows us to write £ (x) to
call the function that £ points to. Although £ (x) looks more natural, l’Il stick
with (*£) (x) as a reminder that £ is a pointer to a function, not a function name.

The gsort Function

Although it might seem that pointers to functions aren1 relevant to the average
programmer, that couldn’t be further from the truth. In fact, some of the most use-
ful functions in the C library require a function pointer as an argument. One of
these is gsort, which belongs to the <stdlib.h> header. qsort is a general-
purpose sorting l'unction that’s capable of sorting any array. based on any criteria
that we choose.

Since the elements of the array that it sorts may be of any type—even a struc-
ture or union type—qsort must be told how to determine which of two array ele-
ments is “smaller” We’l1 provide this information to gsort by writing a
comparison function. When given two pointers p and q to array elements, the
comparison function must return an integer that is negative if *p is “less than” *q,
