586

Chapter 22
8.
@ o
*10.

InputOutput

O1 46 02 6F O1 20 O1 62 O1 61 01 72 03 21 05 20

Run-length encoding works well if the original file contains many long sequences of identi-
cal bytes. In the worst case (a file with no repeated bytes). run-length encoding can actually
double the length of the file.

(a) Write a program named compress_file that uses run-length encoding to compréss
a file. To run compress _ file, we'd use a command of the form

compress file original-file

compress file will write the compressed version of original-file 10 original-file.rle.
For example. the command

compress file foo.txt

will cause compress_file to write a compressed version of foo. txt to a file named
Éoo.txt.rle. Hint: The program described in Programming Project 6 could be useful
for debugging.

(b) Write a program named uncompress file that reverses the compression performed
by the compress £ile program. The uncompress file command will have the
form

uncompress_file compressed-file
compressed-file should have the extension .rle. For example, the command
uncompress file foo.txt.rle

Will cause uncompress £ile to open the file foo.txt.rle and write an uncom-
pressed version of its contents to foo .txt. uncompress_file should display an error
message 1f its command-line argument doesn’t end with thé .rle extension.

Modify the inventory. c program of Section 16.3 by adding two new operations:

m Save the database in a specified file.
w |oad the database from a specified file.

Use the codes d (dump) and r (restore), respectively, to represent these operations. The
Interaction with the user should have the following appearance:

Enter operation code: d
Enter name of output file: inventory.dat

 

Enter operation code: r
Enter name of input file: inventory.dat

 

Hint: Use fwrite to write the array containing the parts to à binary file. Use £read to
restore the array by reading 1t from a file.

Write a program that merges two files containing part records storcd by the inventory.c
program (sce Programming Project 8). Assume that the records in each file are sorted by
part number, and that we want the resulting file to be sorted as well. If both files have a part
with the same number, combine the quantities stored in the records. (As a consistency
check, have the program compare the part names and print an error message if they don't
match.) Have the program obtain the names of the input files and the merged file from the
command line.

Modify the inventory2.c program of Scection 17.5 by adding the d (dump) and r
(restore) operations described in Programming Project &. Since the part structures aren’t
stored in an array, the d operation can*t save them all by à single call of fwrite. Instead. it
will need to visit each node in the linked list, writing the part number, part name, and quan-
