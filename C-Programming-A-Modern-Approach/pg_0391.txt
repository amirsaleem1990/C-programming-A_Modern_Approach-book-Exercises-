366

Chapter 15 _ Writing Large Programs

15.4

Most of the functions in line.c are casy to write. The only tricky one is
write_line, which writes a line with justification. write line writes the
characters in Line one by one, pausing at the space between each pair of words to
write additional spaces rf needed. The number of additional spaces is stored in
spaces_to_insert. which has the value extra _spaces / (num words
- 1). where extra _spaces 1s initially the difference between the maximum
line length and the uctual line length. Since extra_spaces und num_words
change after cach word is printed, spaces to insert will change as well. If
extra_spaces is 10 initially and num _ words 1s 5, then the first word will be
followed by 2 extra spaces, the second by 2. the third by 3, and the fourth by 3.

Building a Multiple-File Program

In Section 2.1, we examined the process of compiling and linking a program that
fits into a single file. Let’s expand thal discussion to cover multiple-file programs.
Building a large program requires the same basic steps as building a small one:

u Compiling. Each source file in the program must be compiled separatelv.
(Heacder files don’t need to be compiled: the contents of à header file are auto-
matically compiled whenever à source file that includes it is compiled.) For
each source file, the compiler generates a file containing object code. These
FNles—known as object files—huave the extension .o in UNIX and .obj in
Windows.

 

# Linking. The linker combines the object files created in the previous step—
along with code for library functions—to produce an executable file. Among
other duties, the linker 1s responsible for resolving external references lefi
bchind by the compiler. (An external reference occurs when a function in one
file calls à function defined in another file or accesses a variable defined in
another file.)

Most compilers allow us to build a program in a singlé step. With the GCC
compiler, For example. we'd use the following command to build the justi£y
program of Section 15.3:

qcc -o justify justify.c line.c word.c

The three source files are first compiled into object code. The object files are then
automatically passed to the linker, which combines theim into à single file. The -o
option specifies that we want the executable file to be named justi Éy.

Makefiles

Putting the names of all the source files on the command lîine quickly gets tedious.
Worse still. we could waste a lot of time when rebuilding a program if we recom-
pile all source files, not just the ones that were affected by our most recent changes.
