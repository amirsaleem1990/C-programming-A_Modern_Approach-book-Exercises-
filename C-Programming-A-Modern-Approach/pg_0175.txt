150

Chapter 7  Basic Types

portability tip

The declarations of Dollars variables need not be changed. Without the type
definition, we would need to locate all £loat variables that store dollar amounts
(not necessarily an easy task) and change their declarations.

Type Definitions and Portability

Type definitions are an important tool for writing portable programs. One of the
YP p &P prog
problems with moving a program from one computer to another is that types may

have different ranges on different machines. If i is an int variable, an assignment
like

i = 100000;

is fine on a machine with 32-bit integers, but will fail on a machine with 16-bit
integers.

lor greater portability, consider using typedeË to define new names for
integer types.

Suppose that we're writing à program that needs variables capable of storing
product quantities in the range O-50,000. We could use long variables for this
purpose (since they're guaranteed to be able to hold numbers up to at least
2,147,483,647), but we'd rather use int variables, since arithmetic on int values
may be faster than operations on long values; also, int variables may take up
less space.

Instead of using the int type to declare quantity variables. we can define our
own “quantity” type:

typedef int Quantity;
and use this type to declare variables:
Quantity ;

When we transport the program to a machine with shorter integers, we’Il change
the definition of Quantity:

typedef long Quantity;

This technique doesn*t solve all our problems, unfortunately, since changing the
definition of Quantity may affect the way Quant i ty variables are used. At the
very least, calls of print£ and scan£ that use Quant ity variables will need to
be changed, with %d conversion specifications replaced by $1 d.

The C library itself uses typede£ to create names for types that can vary
from one C implementation to another; these types often have names that end with
_t.suchas ptrdiff t, size t,andwchar t. The exact definitions of these
types will vary, but here are some typical examples:
