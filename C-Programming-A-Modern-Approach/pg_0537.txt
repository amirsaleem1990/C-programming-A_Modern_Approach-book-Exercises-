512 Chapter 20

/

table of operators » Appendix À

Low-Level Programming

Each of the —, & “, and | operators has a different precedence:

Highest: -
&

Lowest: |

Às à result, we can combine these operators in expressions without having to use
parentheses. For example, we could write i & -j | K instead of (i & (-j)) | K
and i “ j & -k instead of i ” (j & (-k)). Of course. it doesn’t hurt to use
parentheses to avoid confusion.

 

The precedence of &. *, and | is lower than the precedence of the relational and
equality operators. Consequently, statements like the following one won’t have the
desired effect:

if (status & 0x4000 != O)

Instead of testing whether status & Ox4000 isn't zero. this statement will
evaluate Ox4000 != O (which has the value !), then test whether the value of
status & 1 isn’{ zero.

 

The compound assignment operators &=, “=, and |= correspond to the bit-
wise operators &. *. and |:

i = 21; /* i is now 21 (binary 00000000C0010101) */
j = 56; /* j is now 56 (binary 0000000000111000) */
i & ;; /* i is now 16 (binary 0000000000010000) */
i “= j; /* i is now 40 (binary 00000000C00101000) */
i |= j; /* i is now 56 (binary 00000000C0111000) */

Using the Bitwise Operators to Access Bits

When we do low-level programming. we’1l often need to store information as sin-
gle bits or collections of bits. In graphics programming, for example, we may want
to squeeze two or more pixels into a single byte. Using the bitwise operators. we
can extract or modify data that's stored in a small number of bits.

Let's assume that i 1s a 16-bit unsigned short variable. Let’s see how to
perform the most common single-bit operations on i:

u Seffing a bit. Suppose that we want to set bit 4 of i. (We'I] assume that the
leftmost—or mosf significant—bit 1s numbered 15 and the least significant 1s
numbered 0.) The casiest way Lo set bit 4 is to or the value of 1 with the con-
stant Ox0010 (a “mask” that contains a | bit in position 4):

i = 0x0000; /* i is now 0000000000000000 */
i |= 0x0010; /* i is now 0000000000010000 */

More generally, 1f the position of the bit is stored in the variable j, we can use
a shift operator to create the mask:
