escape sequences > 7.3

QaÂ

3.1 The printf Function 41

with three digits after the decimal point. Since x requires only seven charac-
ters (three before the decimal point, three after the decimal point, and one for
the decimal point itself), three spaces precede x.

u %10.3e — Displays x in exponential form, using 10 characters overall, with
three digits after the decimal point. x requires nine characters altogether
(including the exponent), so one space precedes x.

u %-10g — Displays x in either fixed decimal form or exponential form, using
10 characters overall. In this case, print£ chose to display x in fixed deci-
mal form. The presence of the minus sign forces left justification, so x 1s fol-
lowed by four spaces.

Escape Sequences

The \n code that we often use in format strings is called an escape sequence.
Escape sequences enable strings to contain characters that would otherwise cause
problems for the compiler, including nonprinting (control) characters and charac-
ters that have a special meaning to the compiler (such as "). We'1l provide a com-
plete list of escape sequences later; for now, here’s a sample:

Alert (bell) \a
Backspace \b
New line \n

Horizontaltab: \t

When they appear in print£ format strings, these escape sequences represent
actions to perform upon printing. Printing \a causes an audible beep on most
machines. Printing \b moves the cursor back one position. Printing \n advances
the cursor to the beginning of the next line. Printing \t moves the cursor to the
next tab stop.

À string may contain any number of escape sequences. Consider the following
printf example, in which the Fformat string contains six escape sequences:

printf ("Item\tUnit\tPurchase\n\tPrice\tDate\n") ;

Executing this statement prints a two-line headine:

Item Unit Purchase
Price Date

 
