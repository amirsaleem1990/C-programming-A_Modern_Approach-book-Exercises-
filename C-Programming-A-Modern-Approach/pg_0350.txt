14.3  Macro Definitions 325

After preprocessing, this declaration becomes
int il, i2, i3;

The ## operator isn’t one of the most frequently used features of the prepro-
cessor; in fact, it’s hard to think of many'situations that require it. To find a realistic
apptication of ##, let's reconsider the MAX macro described earlier in this section.
As we observed then. MAX doesn’t behave properly 1f its arguments have side
effects. The alternative to using the MAX macro is to write a max function. Unfor-
tunately. one max function usually isn’t enough: we may need a max function
whose arguments are int values, one whose arguments are float values, and so
on. All these versions of max would be identical except for the types of the argu-
ments and the return type, so it seems a shame to define each one from scratch.

The solution is to write a macro that expands into the definition of a max func-
tion. The macro will have a single parameter, type. which represents the type of
the arguments and the return value. There's just one snag: 1f we use the macro to
create more than one max function, the program won't compile. (C doesn’t allow
two functions to have the same name 1f both are defined in the same file.) To solve
this problem, we’1l use the ## operator to create a different name for each version
of max. Here’s what the macro will look like:

#define GENERIC MAX (type) \
type typet# max(type x, type y) \
{ \

return x > y ? x : y; \
}

Notice how type is joined with _max to form the name of the function.
Suppose that we happen to need a max function that works with £loat val-
ues. Here’s how we’d use GENERIC MAX lo define the function:

GENERIC MAX (float)
The preprocessor expands this line into the following code:

float float max(float x, £loat y) { return x > y ? x : y: }

General Properties of Macros

Now that we’ve discussed both simple and parameterized macros. let’s look at
some rules that apply to both:

m À macro’s replacement list may contain invocations of other macros. For
example. we could define the macro TWO_ PI in terms of the macro PI:

#define PI 3.14159
#define TWO _ PI (2*PI)

When it encounters TWO_PI later in the program, the preprocessor replaces t
by (2*PI). The preprocessor then rescans the replacement list to see 1if 11
