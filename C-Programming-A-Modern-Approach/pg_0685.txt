660 Chapter 25

Table 25.11

Formatted Wide-Character
Input/Output Functions
and Their <stdio.h>
Equivalents

fwprintf

iwscanf

swprintf

International Features

 

 

<wchar.h> Function <stdio.h> Equivalent
Ewprintf fprintf
fwscanf Iscanf
swprintf snprint£. sprintf
swscanf sscanf
vfwprintf vfprintf
vÉwscanf vÉscant
vswprintÉ vsnprint£.vsprint£
vswscanf vsscanf
vwprint£ vprint£
vwscanf vscanf
wprint£ printf
wscanf scanf

 

 

 

Additional differences between £wprint£ and fprintf include the fol-
lowineg:

m The %c conversion specifier is used when the corresponding areument has
type int. Ifthe 1 length modifier is present (making the conversion #1 c). the
argument 1s assumed to have type wint_ t. In either case, the corresponding
argument is written as a wide character.

u The $s conversion specifier is used with a pointer Lo a character array, which
may contain multibyte characters. (Fprint£ has no special provision for
multibyte characters.) If the 1 length modifier is present, as in 51 s, the corre-
sponding argument should be an array containinge wide characters. In either
case, the characters in the array are wrilten as wide characters. (With
Éprint£. the %1s specification also indicates an array of wide characters,
but they’re converted to multibyte characters before being written.)

Unlike fscan£, the £wscan£ function reads wide characters. The $c. %s.
and % [ conversions require special mention. Each of these causes wide characters
to be read and then converted to multibyte characters before being stored in à char-
acler array. Éwscan£ uses un mbstate t object to keep track of the state of the
conversion during this process; the object is set to zero at the beginning of each
conversion. If the 1 length modifier is present (making the conversion $1c. %1s.
or =1 [), then the input characters are not converted but instead arc stored directly
in an array of wchar_t clements. Thus, il’s necessary to use 31s when reading à
string of wide characters if the intent is to store them as wide characters. If &s is
used instead, wide characters will be read from the input stream but converted to
multibyte characters before being stored.

swprint£ writes wide characters into an array of wchar t elements, It’s
similar to sprint£ and snprint£ but not identical to either one. Like
snprintË. it uses the parameter n to limit the number of (wide) characters that it
will write. However, swprint£f returns the number of wide characters actually
written, not including the null character. In this respect, it resembles sprintf
rather than snprint£, which returns the number of characters that would have
been written (not including the null character) had there been no length restriction.
