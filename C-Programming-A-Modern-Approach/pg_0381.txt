356

Chapter 15 Writing Large Programs

extern keyword » /8.2

e 7.41

which not only declares ù to be à variable of type int. but defines i as well. by
causing the compiler to set aside space for à. To declare à without defining it, we
must put the keyword extern at the beginning of its declaration:

extern int i; /* declares i without defining it */

extern informs the compiler that à 1s defined elsewhere in the program (most
likely in à different source file). so there’s no need to allocate space for 1t.

extern works with variables of all types. When we usc it in the declaration
of an array, we can omit the length of the array:

extern int a[];

Since the compiler doesn’t allocate space for a at this time, there’s no need for it to
know a's length.

To share a variable i among several source files, we first put à definition of i
in one file:

int 1;

IF à needs to be initialized, the initializer would go here. When this file is com-
piled, the compiler will allocate storage for i. The other files will contain declara-
tions of i:

extern int i;

By declaring 1 in each file. it becomes possible to access and/or modify i within
those files. Because of the word extern. however, the compiler doesn't allocate
additional storage for i each time one of the files is compiled.

When a variable is shared among files, we'll face a challenge similar to one
that we had with shared functions: ensuring that all declarations of a variable agree
with the definition of the variable.

 

When declarations of the same variable appear in different files, the compiler can't
check that the declarations match the variable’s definition. For example. one file
may contain the definition

int 1;
while another file contains the declaration

extern long 1;

Àn error of this kind can cause the program to behave unpredictably.

 

To avoid inconsistency. declarations of shared variables are usually put in
header files. À source file that needs access to a particular variable can then
include the appropriate header file. In addition. each header file that contains à
