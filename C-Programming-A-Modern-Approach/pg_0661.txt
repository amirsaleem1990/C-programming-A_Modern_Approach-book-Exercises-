636

Chapter 24  Error Handling

goto statement > 6.4

setimp
QeA

longimp

/\

PROGRAM

isetimp.c

Normally, a function returns to the point at which it was called. We can°t use a
goto statement to make il go elsewhere, because a goto can jump only to a label
within the same function. The <set-jmp.h> header, however, makes it possible
for one function to jump directly to another function without returnine.

The most important items in <setjmp.h> are the setjmp macro and the
longjmp function. setjmp “marks” à place in a program: longjmp can then
be used to return to that place later. Although this powerful mechanism has a vari-
ety of potential applications, it’s used primarily f'or error handling.

To mark the target of a future jump. we call set jmp, passing it a variable of
lype jmp_buf (declared in <setjmp.h>). setjmp stores the current “environ-
ment” (including a pointer to the location of the set jmp itself) in the variable for
later use in a call of longjmp; it then returns zero.

Returning to the point of the set jmp is done by calling longjmp, passing it
the same jmp_bu£ variable that we passed to set jmp. After restoring the envi-
ronment represented by the jmp_buf variable, longjmp will—here's where it
gets tricky—retuwrn from the setjmp call. setjmp's return value this time is
val, the second argument to longjmp. (If val is 0, set jmp returns |.)

 

Be sure that the argument to longjmp was previously initialized by a call of
setjmp. Ît's also important that the function containing the original call of set-
jmp must not have returned prior to the call of longjmp. If either restriction is
violated, calling 1longjmp results in undefined behavior. (The program will prob-
ably crash.)

 

To summarize, setjmp returns zero the first time it’s called: later, longjmp
transfers control back to the original call of setjmp. which this time returns a
nonzero value. Got it? Perhaps we need an example…

Testing setjmp/longjmp

The following program uses setjmp to mark a place in main; the function f2
later returns to that place by calling longjmp.

/* Tests setjmp/longjmp */

finclude <setjmp.h>
#include <stdio.h>

jmp_buf env;

void f1 (void) ;
void f2 (void) ;

int main(void)

{
if (setjmp(env) == O)
printf ("setjmp returned O\n") ;
