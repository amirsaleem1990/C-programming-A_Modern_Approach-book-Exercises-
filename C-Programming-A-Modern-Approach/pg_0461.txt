436 Chapter 17  Advanced Uses of Pointers

struct part *find part (int number)

{

Sstruct part *p;

for (p = inventory;
p != NULL && number > p->number;
p p->next)

if (p != NULL && number == p->number)
return p;
return NULL;

}

/—k**********‘k**********‘k***********************************

* insert: Prompts the user for information about a new *
* part and then inserts the part into the *
* inventory list; the list remains sorted by *
* part number. Prints an error message and *
* returns prematurely if the part already exists *
* or space could not be allocated for the part. *
KKK KKARRRRRRRRKKAX

/

void insert (void)

{

struct part *cur, *prev, *new node;

new_node = malloc (sizeof (struct part)) ;

if (new node == NULL) |
printf ("Database is full; can't add more parts.\n") ;
return;

}

print£ ("Enter part number: ") ;
scanf ("%d", &new node->number) ;

for (cur = inventory, prev = NULL;
|

cur != NULL && new _ node->number > cur->number ;
prev = cur, cur = cur->next)
if (cur != NULL && new _ node->number == cur->number) {

print£f("Part already exists.\n") ;
Êree (new_node) ;
return;

}

print£ ("Enter part name: ");
read_line (new node->name, NAME_LEN) ;
print£ ("Enter quantity on hand: ");
scanf ("%d", &new_node->on hand) ;

new_node->next = cur;
if (prev == NULL)
inventory = new node;
else
prev->next = new node;
