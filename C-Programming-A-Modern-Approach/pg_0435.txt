410 Chapter 16  Structures, Unions, and Enumerations

Section 16.4

® 1.

Suppose that s 1s the following structure:

struct |
double a;
union {
char b[4] ;
double c;

int d;
} e:
char Ê [4];

} s;

If char values occupy one byte, int values occupy four bytes, and double values occupy
eight bytes, how much space will a C compiler allocate for s? (Assume that the compiler
leaves no ‘“holes” between members.)

Suppose that u is the following union:

union {
double a;
struct {
char b[4] ;
double c;
int d;
} es
char £E[4];
} u;
If char values occupy one byte. int values occupy four bytes, and double values occupy
eight bytes, how much space will a C compiler allocate for u? (Assume that the compiler
leaves no “holes” between members.)

Suppose that s is the following structure (point 1s à structure tag declared in Exercise 10):

struct shape |

int shape _kind; /* RECTANGLE or CIRCLE */
struct point center; /* coordinates of center */
union {

struct |

int height, width;
} rectangle;
struct
int radius;
} circle;
} u;
} s:
If the value of shape _ kind is RECTANGLE, the height and width members store the
dimensions of a rectangle. If the value of shape _kind is CIRCLE, the radius member
storcs the radius of a circle. Indicate which of the followine statements are legal, and show
how to repair the ones that aren’t:

(a) s.shape_kind = RECTANGLE ;
(b) s.center.x = 10;

(c) s.height = 25;

(d) s.u.rectangle.width = 8;
(e) s.u.circle = 5;

(M s.u.radius = 5;
