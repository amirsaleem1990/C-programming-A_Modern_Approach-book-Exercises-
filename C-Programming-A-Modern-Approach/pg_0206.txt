16.

l'7.

Programming Projects 181

positions later in the alphabet. (IF thé replacement would go past the letter Z the cipher
“wraps around” to the beginning of the alphabct. For example, 1f each letter is replaced by
the letter two positions after it. then Y would be replaced by À. and Z would be replaced by
B.) Write à program that encrypts a message using a Caesar cipher. The user will enter the
message to be encrypted and the shift amount (the number of positions by which letters
should be shifted):

Enter message to be encrypted: Go ahead, make my day.
Enter shift amount (1-25): 3
Encrypted message: Jr dkhdg, pdnh pb gdb.

 

Notice that the program can decrypt a message if the user enters 26 minus the original key:

Enter message to be encrypted: Jr dkhdg, pdnh pb qdb.
Enter shift amount (1-25): 23
Encrypted message: Go ahead, make my day.

 

You may assumc that the message does not excecd 80 characters. Characters other than let-
ters should be left unchanged. Lower-case letters remain lower-case when encrypted, and
upper-case letters remain upper-case. Hint: To handle the wrap-around problem, use the
expression ( (ch - 'A') +n) % 26 + 'A' lo calculate the encrypted version of an upper-
case letter. where ch stores the letter and n stores the shift amount. (You'Il need a similar
expression for lower-case letters.)

Write a program that tests whether two words are anagrams (permutations of the same let-
ters):

Enter first word: smartest
Enter second word: mattress
The words are anagrams.

Enter first word: dumbest
Enter second word: stumble
The words are not anagrams.

Write a loop that reads the first word, character by character, using an array of 26 integers to
keep track of how many times each letter has been seen. (For example. after the word smart-
esr has been read, the array should contain the valucs 100010000000100001220
0 0000. reflecting the fact that smartest contains one a, one € one n, One r, two s's and
two s.) Use another loop to read the second word. except this time decrementing the corre-
sponding array element as each letter is read. Both loops should ignore any characters that
aren*t letters, and both should treat upper-case letters in the same way as lower-case letters.
After the second word has been read, use a third loop to check whether all the clements in
the array are zero. If so. the words are anagrams. Hint: You may wish to use functions from
<ctype.h>, such as isalpha and tolower.

Write a program that prints an n X n magic square (a square arrangement of the numbers
° - . .

| 2. …. n7 in which the sums of the rows, columns, and diagonals are all the same). The

user will specify the value of n:

This program creates a magic square of a specified size.
The size must be an odd number between 1 and 99.
Enter size of magic square: S

177 24 l 8 15
23 5 7 14 16
4 6 13 20 22
10 12 19 21 3

11 18 25 2 9
