15.2  Header Files 353

Sharing Macro Definitions and Type Definitions

Most large programs contain macro definitions and type definitions that need to be
shared by several source files (or, in the most extreme casc. by al! source files).
These definitions should go into header files.

For example. suppose that we're writing à program that uses macros named
BOOL., TRUE, and FALSE. (There’s no need for these in C99, of course. because
the <stdboo!l .h> header defines similar macros.) Instead of repeating the defi-
nitions of these macros in each source file that needs them. it makes more sense to
put the definitions in à header file with a name like boolean.h:

Jdefine BOOL int
#define TRUE 1
Fdefine FALSE O

Any source file that requires these macros will simply contaimn the line
#include "boolean.h"

[In the following figure. two files include boolean.h:

 

'#defîne BOOL int
#define TRUE 1
#define FALSE O

 

/ boolean.h

+ . 4

rinclude "boçlean.h" #include "boolean.h"

  

Type definitions are also common in header files. For example. instead of
defining a BOOL macro. we might use typedeË to create a Bool type. If we do,
the boolean.h file will have the following appearance:

#define TRUE 1
#define FALSE C
typedef int Bool;

Putting definitions of macros and types in header files has some clear advan-
tages. First, we save time by not having to copy the definitions into the source files
where they're needed. Second, the program becomes casier to modify. Changine
the definition of a macro or type requires only that we edit a sinele header file: we
don’t have to modify the many source files in which the macro or type 1s used.
Third, we don't have to worry about inconsistencies caused by source files contain-
ing different definitions of the same macro or type.
