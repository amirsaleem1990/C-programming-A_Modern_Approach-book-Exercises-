æ

argc and argv > 13.7

Q&ÂÀ

<stdlib.h>header »26.2

9.5 Program Termination 203

int main(void)

(
;

Older C programs often omit main°s return type, taking advantage of the fact that
it traditionally defaults to int:

main ()

{
}

Omitting the return type of a function isn’t legal in C99, so it’s best to avoid this
practice. Omitting the word void in main’s parameter list remains legal, but—as
a matter of style—it's best to be explicit about the fact that main has no parame-
ters. (We’Il see later that main sometimes does have two parameters, usually
named argc and argv.)

The value returned by main is a status code that—in some operating sys-
tems—can be tested when the program terminates. main should return O 1if the
program terminates normally; to indicate abnormal termination, main should
return a value other than O. (Actually, there’s no rule to prevent us from using the
return value for other purposes.) It’s good practice to make sure that every C pro-
gram returns a status code, even if there are no plans to use it, since someone run-
ning the program later may decide to test it.

The exit Function

Executing a return statement in main 1s one way to terminate a program.
Another is calling the exit function, which belongs to <stdlib.h>. The argu-
ment passed to exit has the same meaning as main°s return value: both indicate
the program’s status at termination. To indicate normal termination, we'd pass 0:

exit (0) ; /* normal termination */

Since O is a bit cryptie, C allows us to pass EXIT_SUCCESS instead (the effect 1s
the same):

exit (EXIT SUCCESS) ; /* normal termination */
Passing EXIT FAILURE indicates abnormal termination:
exit (EXIT _ FAILURE) ; /* abnormal termination */

EXIT SUCCESS and EXIT FAILURE are macros defined in <stdlib.h»>.
The values of EXIT SUCCESS and EXIT _ FAILURE are implementation-
defined; typical values are O and [, respectively.

As methods of terminating a program, return and exit are closely related.
In fact, the statement

return expression ;
