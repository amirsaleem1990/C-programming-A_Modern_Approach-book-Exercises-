>

Q&A

expression statements > 4.5

 

9.1  Defining and Calling Functions 189

Function Calls

À function call consists of a function name followed by a list of arguments.
enclosed in parentheses:

average (x, y)
print count (i)
print pun()

 

If the parentheses are missing, the function won°t get called:
print pun; /*** WRONG ***/

The result is a legal (albeit meaningless) expression statement that looks correct,
but has no effect. Some compilers issue à warning such as “sratement with no

effect.”

 

À call of a void function is always followed by a semicolon to turn it into a
statement:

print _count (i) ;
print pun() ;

À call of a non-void function, on the other hand. produces a value that can be
stored in a variable, tested. printed, or used in some other way:

avg = average(x, y);
if (average(x, y) > O)

print£ ("Average is positive\n") ;
print£("The average is %g\n", average(x, y));

The value returned by à non-void function can always be discarded 1f it’s not
needed:

average(x, y) ; /* discards return value */

This call of average 1s an example of an expression statement: a statement that
evaluates an expression but then discards the result.

[gnoring the return value of average is an odd thing to do. but for some
functions it makes sense.

 
